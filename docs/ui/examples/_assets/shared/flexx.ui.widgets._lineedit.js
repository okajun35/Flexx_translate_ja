/* ===================== flexx.ui.widgets._lineedit =====================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.widgets._lineedit", ["pyscript-std.js", "flexx.ui._widget"], function (_py, flexx_ui__widget) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;

var _phosphor_widget = flexx.require('phosphor/lib/ui/widget');



var LineEdit = flexx.classes.LineEdit = function () {
    _pyfunc_op_instantiate(this, arguments);
}
LineEdit.prototype = Object.create(flexx.classes.Widget.prototype);
LineEdit.prototype._base_class = flexx.classes.Widget.prototype;
LineEdit.prototype._class_name = "LineEdit";

LineEdit.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel", "submit"];
LineEdit.prototype.__handlers__ = ["_LineEdit__autocomp_changed", "_LineEdit__disabled_changed", "_LineEdit__password_mode_changed", "_LineEdit__placeholder_text_changed", "_LineEdit__text_changed", "_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "check_size"];
LineEdit.prototype.__local_properties__ = ["parent", "size", "user_text"];
LineEdit.prototype.__properties__ = ["autocomp", "base_size", "children", "container", "css_class", "disabled", "flex", "icon", "parent", "password_mode", "placeholder_text", "pos", "size", "style", "tabindex", "text", "title", "user_text"];

LineEdit.prototype._LineEdit__autocomp_changed = function () {
    var autocomp, events, op, option, stub1_seq, stub2_itr, stub3_seq, stub4_itr;
    events = Array.prototype.slice.call(arguments);
    autocomp = this.autocomp;
    stub1_seq = this._autocomp;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        op = stub1_seq[stub2_itr];
        this._autocomp.removeChild(op);
    }
    stub3_seq = autocomp;
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) {
        stub3_seq = Object.keys(stub3_seq);
    }
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        option = stub3_seq[stub4_itr];
        op = window.document.createElement("option");
        op.value = option;
        this._autocomp.appendChild(op);
    }
    return null;
};
LineEdit.prototype._LineEdit__autocomp_changed.nobind = true;
LineEdit.prototype._LineEdit__autocomp_changed._connection_strings = ["autocomp"];

LineEdit.prototype._LineEdit__disabled_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    if (_pyfunc_truthy(events[events.length -1].new_value)) {
        this.node.setAttribute("disabled", "disabled");
    } else {
        this.node.removeAttribute("disabled");
    }
    return null;
};
LineEdit.prototype._LineEdit__disabled_changed.nobind = true;
LineEdit.prototype._LineEdit__disabled_changed._connection_strings = ["disabled"];

LineEdit.prototype._LineEdit__password_mode_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this.node.type = ["text", "password"][_pyfunc_int(_pyfunc_bool(this.password_mode))];
    return null;
};
LineEdit.prototype._LineEdit__password_mode_changed.nobind = true;
LineEdit.prototype._LineEdit__password_mode_changed._connection_strings = ["password_mode"];

LineEdit.prototype._LineEdit__placeholder_text_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this.node.placeholder = this.placeholder_text;
    return null;
};
LineEdit.prototype._LineEdit__placeholder_text_changed.nobind = true;
LineEdit.prototype._LineEdit__placeholder_text_changed._connection_strings = ["placeholder_text"];

LineEdit.prototype._LineEdit__text_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this.node.value = this.text;
    return null;
};
LineEdit.prototype._LineEdit__text_changed.nobind = true;
LineEdit.prototype._LineEdit__text_changed._connection_strings = ["text"];

LineEdit.prototype._init_phosphor_and_node = function () {
    var d, f1, f2, node;
    d = window.document.createElement("div");
    d.innerHTML = "<input type=\"text\", list=\"" + this.id + "\" />";
    node = d.childNodes[0];
    this.phosphor = new _phosphor_widget.Widget({"node": node});
    this.node = this.phosphor.node;
    this._autocomp = window.document.createElement("datalist");
    this._autocomp.id = this.id;
    this.node.appendChild(this._autocomp);
    f1 = (function (ev) {return this._set_prop("user_text", this.node.value);}).bind(this);
    f2 = (function (ev) {return (_pyfunc_op_equals(ev.which, 13))? (this.submit()) : (null);}).bind(this);
    this.node.addEventListener("input", f1, false);
    this.node.addEventListener("keydown", f2, false);
    return null;
};

LineEdit.prototype.autocomp = function (v) {
    v = (v === undefined) ? []: v;
    return _pyfunc_list(((function list_comprehension () {var res = [];var i, iter0, i0;iter0 = v;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {i = iter0[i0];{res.push(_pyfunc_str(i));}}return res;}).apply(this)));
};
LineEdit.prototype.autocomp.nobind = true;
LineEdit.prototype.autocomp.default = [];
LineEdit.prototype.autocomp.emitter_type = "Property";

LineEdit.prototype.disabled = function (v) {
    v = (v === undefined) ? false: v;
    return _pyfunc_bool(v);
};
LineEdit.prototype.disabled.nobind = true;
LineEdit.prototype.disabled.default = false;
LineEdit.prototype.disabled.emitter_type = "Property";

LineEdit.prototype.password_mode = function (v) {
    v = (v === undefined) ? false: v;
    return _pyfunc_bool(v);
};
LineEdit.prototype.password_mode.nobind = true;
LineEdit.prototype.password_mode.default = false;
LineEdit.prototype.password_mode.emitter_type = "Property";

LineEdit.prototype.placeholder_text = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
LineEdit.prototype.placeholder_text.nobind = true;
LineEdit.prototype.placeholder_text.default = "";
LineEdit.prototype.placeholder_text.emitter_type = "Property";

LineEdit.prototype.submit = function () {
    return {};
};
LineEdit.prototype.submit.nobind = true;
LineEdit.prototype.submit.emitter_type = "Emitter";

LineEdit.prototype.text = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
LineEdit.prototype.text.nobind = true;
LineEdit.prototype.text.default = "";
LineEdit.prototype.text.emitter_type = "Property";

LineEdit.prototype.user_text = function (v) {
    v = (v === undefined) ? null: v;
    if ((v !== null)) {
        v = _pyfunc_str(v);
        this.text = v;
    }
    return v;
};
LineEdit.prototype.user_text.nobind = true;
LineEdit.prototype.user_text.default = null;
LineEdit.prototype.user_text.emitter_type = "Readonly";



return {LineEdit: LineEdit, _phosphor_widget: _phosphor_widget};
});
