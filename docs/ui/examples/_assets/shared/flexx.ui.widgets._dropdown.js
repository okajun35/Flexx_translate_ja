/* ===================== flexx.ui.widgets._dropdown =====================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.widgets._dropdown", ["pyscript-std.js", "flexx.ui._widget"], function (_py, flexx_ui__widget) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;





var BaseDropdown = flexx.classes.BaseDropdown = function () {
    _pyfunc_op_instantiate(this, arguments);
}
BaseDropdown.prototype = Object.create(flexx.classes.Widget.prototype);
BaseDropdown.prototype._base_class = flexx.classes.Widget.prototype;
BaseDropdown.prototype._class_name = "BaseDropdown";

BaseDropdown.prototype._HTML = "<span class='flx-dd-label'></span><input type='text' class='flx-dd-edit'></input><span></span><span class='flx-dd-button'></span><div class='flx-dd-strud'>&nbsp;</span>";
BaseDropdown.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
BaseDropdown.prototype.__handlers__ = ["_BaseDropdown__on_text", "_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "check_size"];
BaseDropdown.prototype.__local_properties__ = ["parent", "size"];
BaseDropdown.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "parent", "pos", "size", "style", "tabindex", "title"];

BaseDropdown.prototype._BaseDropdown__on_text = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this._label.innerHTML = this.text + "&nbsp;";
    this._edit.value = this.text;
    return null;
};
BaseDropdown.prototype._BaseDropdown__on_text.nobind = true;
BaseDropdown.prototype._BaseDropdown__on_text._connection_strings = ["text"];

BaseDropdown.prototype._but_click = function () {
    if (_pyfunc_truthy(this.node.classList.contains("expanded"))) {
        this._collapse();
    } else {
        this._expand();
    }
    return null;
};

BaseDropdown.prototype._check_expanded_pos = function () {
    var rect;
    if (_pyfunc_truthy(this.node.classList.contains("expanded"))) {
        rect = this.node.getBoundingClientRect();
        if ((!(_pyfunc_op_equals(rect.top, this._rect_to_check.top) && _pyfunc_op_equals(rect.left, this._rect_to_check.left)))) {
            this._collapse();
        } else {
            window.setTimeout(this._check_expanded_pos, 100);
        }
    }
    return null;
};

BaseDropdown.prototype._collapse = function () {
    _pymeth_remove.call(this.node.classList, "expanded");
    return null;
};

BaseDropdown.prototype._collapse_maybe = function (e) {
    var t;
    t = e.target;
    while (t !== window.document.body) {
        if ((t === this.node)) {
            return null;
        }
        t = t.parentElement;
    }
    window.document.removeEventListener("mouseup", this._collapse_maybe);
    this._collapse();
    return null;
};

BaseDropdown.prototype._expand = function () {
    var rect;
    this.node.classList.add("expanded");
    rect = this.node.getBoundingClientRect();
    this._rect_to_check = rect;
    window.setTimeout(this._check_expanded_pos, 100);
    window.document.addEventListener("mouseup", this._collapse_maybe, 0);
    return rect;
};

BaseDropdown.prototype._init_phosphor_and_node = function () {
    var f2;
    this.phosphor = this._create_phosphor_widget("span");
    this.node = this.phosphor.node;
    this.node.innerHTML = this._HTML;
    this._label = this.node.childNodes[0];
    this._edit = this.node.childNodes[1];
    this._button = this.node.childNodes[3];
    this._strud = this.node.childNodes[4];
    f2 = (function (e) {return (_pyfunc_op_equals(e.which, 13))? (this._submit_text()) : (null);}).bind(this);
    this._edit.addEventListener("keydown", f2, false);
    this._edit.addEventListener("blur", this._submit_text, false);
    this._label.addEventListener("click", this._but_click, 0);
    this._button.addEventListener("click", this._but_click, 0);
    return null;
};

BaseDropdown.prototype._submit_text = function () {
    this.text = this._edit.value;
    return null;
};



var ComboBox = flexx.classes.ComboBox = function () {
    _pyfunc_op_instantiate(this, arguments);
}
ComboBox.prototype = Object.create(flexx.classes.BaseDropdown.prototype);
ComboBox.prototype._base_class = flexx.classes.BaseDropdown.prototype;
ComboBox.prototype._class_name = "ComboBox";

ComboBox.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
ComboBox.prototype.__handlers__ = ["_BaseDropdown__on_text", "_ComboBox__on_editable", "_ComboBox__on_options", "_ComboBox__on_placeholder_text", "_ComboBox__on_selected_index", "_ComboBox__on_selected_key", "_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "check_size"];
ComboBox.prototype.__local_properties__ = ["parent", "size"];
ComboBox.prototype.__properties__ = ["base_size", "children", "container", "css_class", "editable", "flex", "icon", "options", "parent", "placeholder_text", "pos", "selected_index", "selected_key", "size", "style", "tabindex", "text", "title"];

ComboBox.prototype._ComboBox__on_editable = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    if (_pyfunc_truthy(this.editable)) {
        this.node.classList.add("editable-yes");
        _pymeth_remove.call(this.node.classList, "editable-no");
    } else {
        _pymeth_remove.call(this.node.classList, "editable-yes");
        this.node.classList.add("editable-no");
    }
    return null;
};
ComboBox.prototype._ComboBox__on_editable.nobind = true;
ComboBox.prototype._ComboBox__on_editable._connection_strings = ["editable"];

ComboBox.prototype._ComboBox__on_options = function () {
    var events, i, index, key, keys, li, option, strud, stub1_, stub2_seq, stub3_itr, stub4_tgt, text;
    events = Array.prototype.slice.call(arguments);
    while (this._ul.firstChild) {
        this._ul.removeChild(this._ul.firstChild);
    }
    strud = "";
    stub2_seq = _pyfunc_enumerate(this.options);
    if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
        stub2_seq = Object.keys(stub2_seq);
    }
    for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
        stub4_tgt = stub2_seq[stub3_itr];
        i = stub4_tgt[0]; option = stub4_tgt[1];
        stub1_ = option;
        key = stub1_[0];text = stub1_[1];
        li = window.document.createElement("li");
        li.innerHTML = ((_pymeth_strip.call(text).length))? (text) : ("&nbsp;");
        li.index = i;
        this._ul.appendChild(li);
        strud=_pyfunc_op_add(strud, text + ("&nbsp;&nbsp;<span class=\"flx-dd-space\"></span><br />"))
    }
    keys = (function list_comprehension () {var res = [];var key_text, iter0, i0;iter0 = this.options;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {key_text = iter0[i0];{res.push(key_text[0]);}}return res;}).apply(this);
    if (_pyfunc_op_contains(this.selected_key, keys)) {
        this.selected_index = null;
        key = this.selected_key;
        this.selected_key = null;
        this.selected_key = key;
    } else if ((this.selected_index < this.options.length)) {
        this.selected_key = null;
        index = this.selected_index;
        this.selected_index = null;
        this.selected_index = index;
    } else {
        this.selected_index = null;
        this.selected_key = null;
    }
    this._strud.innerHTML = strud;
    return null;
};
ComboBox.prototype._ComboBox__on_options.nobind = true;
ComboBox.prototype._ComboBox__on_options._connection_strings = ["options"];

ComboBox.prototype._ComboBox__on_placeholder_text = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this._edit.placeholder = this.placeholder_text;
    return null;
};
ComboBox.prototype._ComboBox__on_placeholder_text.nobind = true;
ComboBox.prototype._ComboBox__on_placeholder_text._connection_strings = ["placeholder_text"];

ComboBox.prototype._ComboBox__on_selected_index = function () {
    var events, key, stub1_, text;
    events = Array.prototype.slice.call(arguments);
    if ((this.selected_index !== null)) {
        if ((this.selected_index < this.options.length)) {
            stub1_ = this.options[this.selected_index];
            key = stub1_[0];text = stub1_[1];
            this.text = text;
            this.selected_key = key;
        }
    }
    return null;
};
ComboBox.prototype._ComboBox__on_selected_index.nobind = true;
ComboBox.prototype._ComboBox__on_selected_index._connection_strings = ["selected_index"];

ComboBox.prototype._ComboBox__on_selected_key = function () {
    var events, index, key, option, stub1_seq, stub2_itr, stub3_tgt;
    events = Array.prototype.slice.call(arguments);
    if ((this.selected_key !== null)) {
        key = this.selected_key;
        if (_pyfunc_truthy(this.options[this.selected_index])) {
            if ((_pyfunc_op_equals((this.options[this.selected_index][0]), key))) {
                return null;
            }
        }
        stub1_seq = _pyfunc_enumerate(this.options);
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
            stub1_seq = Object.keys(stub1_seq);
        }
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            stub3_tgt = stub1_seq[stub2_itr];
            index = stub3_tgt[0]; option = stub3_tgt[1];
            if (_pyfunc_op_equals(option[0], key)) {
                this.selected_index = index;
            }
        }
    }
    return null;
};
ComboBox.prototype._ComboBox__on_selected_key.nobind = true;
ComboBox.prototype._ComboBox__on_selected_key._connection_strings = ["selected_key"];

ComboBox.prototype._expand = function () {
    var rect;
    rect = flexx.classes.BaseDropdown.prototype._expand.call(this);
    this._ul.style.left = rect.left + "px";
    this._ul.style.top = (rect.bottom - 1) + "px";
    this._ul.style.width = rect.width + "px";
    return null;
};

ComboBox.prototype._init_phosphor_and_node = function () {
    flexx.classes.BaseDropdown.prototype._init_phosphor_and_node.call(this);
    this._ul = window.document.createElement("ul");
    this.node.appendChild(this._ul);
    this._ul.addEventListener("click", this._ul_click, 0);
    return null;
};

ComboBox.prototype._submit_text = function () {
    this.text = this._edit.value;
    this.selected_index = null;
    this.selected_key = null;
    return null;
};

ComboBox.prototype._ul_click = function (e) {
    var index, key, stub1_, text;
    index = e.target.index;
    if (_pyfunc_truthy(index >= 0)) {
        stub1_ = this.options[index];
        key = stub1_[0];text = stub1_[1];
        this.selected_index = index;
        this.selected_key = key;
        this.text = text;
    }
    this._collapse();
    return null;
};

ComboBox.prototype.editable = function (v) {
    v = (v === undefined) ? false: v;
    return _pyfunc_bool(v);
};
ComboBox.prototype.editable.nobind = true;
ComboBox.prototype.editable.default = false;
ComboBox.prototype.editable.emitter_type = "Property";

ComboBox.prototype.options = function (options) {
    var keys, opt, options2, stub1_seq, stub2_itr;
    options = (options === undefined) ? []: options;
    if ((({}).toString.call(options).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'object')) {
        keys = _pymeth_keys.call(options);
        { /* if this_is_js() */
        keys = _pyfunc_sorted(keys, undefined, false);
        }
        options = (function list_comprehension () {var res = [];var k, iter0, i0;iter0 = keys;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {k = iter0[i0];{res.push([k, options[k]]);}}return res;}).apply(this);
    }
    options2 = [];
    stub1_seq = options;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        opt = stub1_seq[stub2_itr];
        if ((({}).toString.call(opt).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'array')) {
            opt = [_pyfunc_str(opt[0]), _pyfunc_str(opt[1])];
        } else {
            opt = [_pyfunc_str(opt), _pyfunc_str(opt)];
        }
        _pymeth_append.call(options2, opt);
    }
    return _pyfunc_list(options2);
};
ComboBox.prototype.options.nobind = true;
ComboBox.prototype.options.default = [];
ComboBox.prototype.options.emitter_type = "Property";

ComboBox.prototype.placeholder_text = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
ComboBox.prototype.placeholder_text.nobind = true;
ComboBox.prototype.placeholder_text.default = "";
ComboBox.prototype.placeholder_text.emitter_type = "Property";

ComboBox.prototype.selected_index = function (v) {
    v = (v === undefined) ? null: v;
    if ((v === null)) {
        return null;
    }
    return Math.max(0, _pyfunc_int(v));
};
ComboBox.prototype.selected_index.nobind = true;
ComboBox.prototype.selected_index.default = null;
ComboBox.prototype.selected_index.emitter_type = "Property";

ComboBox.prototype.selected_key = function (v) {
    v = (v === undefined) ? null: v;
    if ((v === null)) {
        return null;
    }
    return _pyfunc_str(v);
};
ComboBox.prototype.selected_key.nobind = true;
ComboBox.prototype.selected_key.default = null;
ComboBox.prototype.selected_key.emitter_type = "Property";

ComboBox.prototype.text = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
ComboBox.prototype.text.nobind = true;
ComboBox.prototype.text.default = "";
ComboBox.prototype.text.emitter_type = "Property";



var DropdownContainer = flexx.classes.DropdownContainer = function () {
    _pyfunc_op_instantiate(this, arguments);
}
DropdownContainer.prototype = Object.create(flexx.classes.BaseDropdown.prototype);
DropdownContainer.prototype._base_class = flexx.classes.BaseDropdown.prototype;
DropdownContainer.prototype._class_name = "DropdownContainer";

DropdownContainer.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
DropdownContainer.prototype.__handlers__ = ["_BaseDropdown__on_text", "_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "check_size"];
DropdownContainer.prototype.__local_properties__ = ["parent", "size"];
DropdownContainer.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "parent", "pos", "size", "style", "tabindex", "text", "title"];

DropdownContainer.prototype._add_child = function (widget) {
    this.node.appendChild(widget.node);
    return null;
};

DropdownContainer.prototype._expand = function () {
    var node, rect;
    rect = flexx.classes.BaseDropdown.prototype._expand.call(this);
    node = this.children[0].node;
    node.style.left = rect.left + "px";
    node.style.top = (rect.bottom - 1) + "px";
    return null;
};

DropdownContainer.prototype._remove_child = function (widget) {
    this.node.removeChild(widget.node);
    return null;
};

DropdownContainer.prototype.text = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
DropdownContainer.prototype.text.nobind = true;
DropdownContainer.prototype.text.default = "";
DropdownContainer.prototype.text.emitter_type = "Property";



return {BaseDropdown: BaseDropdown, ComboBox: ComboBox, DropdownContainer: DropdownContainer};
});
