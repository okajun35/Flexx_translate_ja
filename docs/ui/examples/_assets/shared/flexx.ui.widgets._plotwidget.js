/* ==================== flexx.ui.widgets._plotwidget ====================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.widgets._plotwidget", ["pyscript-std.js", "flexx.ui.widgets._canvas"], function (_py, flexx_ui_widgets__canvas) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;





var PlotWidget = flexx.classes.PlotWidget = function () {
    _pyfunc_op_instantiate(this, arguments);
}
PlotWidget.prototype = Object.create(flexx.classes.CanvasWidget.prototype);
PlotWidget.prototype._base_class = flexx.classes.CanvasWidget.prototype;
PlotWidget.prototype._class_name = "PlotWidget";

PlotWidget.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
PlotWidget.prototype.__handlers__ = ["_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_update_canvas_size", "check_size", "update"];
PlotWidget.prototype.__local_properties__ = ["parent", "size"];
PlotWidget.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "line_color", "line_width", "marker_color", "marker_size", "parent", "pos", "size", "style", "tabindex", "title", "xdata", "xlabel", "ydata", "ylabel", "yrange"];

PlotWidget.prototype._get_ticks = function (scale, t1, t2, min_tick_dist) {
    var first_tick, i, last_tick, stub1_els, stub2_seq, stub3_itr, t, tick_unit, ticks;
    min_tick_dist = (min_tick_dist === undefined) ? 40: min_tick_dist;
    stub1_els = true;
    stub2_seq = this._tick_units;
    if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
        stub2_seq = Object.keys(stub2_seq);
    }
    for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
        tick_unit = stub2_seq[stub3_itr];
        if (_pyfunc_truthy(_pyfunc_op_mult(tick_unit, scale) >= min_tick_dist)) {
            stub1_els = false; break;
        }
    } if (stub1_els) {
        return [];
    }
    first_tick = _pyfunc_op_mult(window.Math.ceil(t1 / tick_unit), tick_unit);
    last_tick = _pyfunc_op_mult(window.Math.floor(t2 / tick_unit), tick_unit);
    ticks = [];
    t = first_tick;
    while (t <= last_tick) {
        _pymeth_append.call(ticks, t);
        t=_pyfunc_op_add(t, tick_unit)
    }
    for (i = 0; i < ticks.length; i += 1) {
        t = ticks[i].toPrecision(4);
        if (_pyfunc_op_contains(".", t)) {
            t = _pymeth_replace.call(t, (new window.RegExp("[0]+$")), "");
        }
        if (_pyfunc_op_equals(t[t.length -1], ".")) {
            t=_pyfunc_op_add(t, "0")
        }
        ticks[i] = t;
    }
    return ticks;
};

PlotWidget.prototype._update = function () {
    var bpad, ctx, h, lc, lpad, lw, mc, ms, rpad, scale_x, scale_y, stub10_, stub11_seq, stub12_itr, stub13_seq, stub14_itr, stub15_seq, stub16_itr, stub17_seq, stub18_itr, stub19_seq, stub1_, stub20_itr, stub21_tgt, stub22_seq, stub23_itr, stub24_tgt, stub25_seq, stub26_itr, stub27_tgt, stub28_seq, stub29_itr, stub2_, stub30_tgt, stub3_, stub4_, stub5_, stub6_, stub7_, stub8_, stub9_, sx, sx_ticks, sxx, sy, sy_ticks, syy, title, tpad, w, x, x1, x2, x_ticks, xlabel, xx, y, y1, y2, y_ticks, ylabel, yrange, yy;
    stub1_ = [this.xdata, this.ydata];
    xx = stub1_[0];yy = stub1_[1];
    yrange = this.yrange;
    stub2_ = [this.line_color, this.line_width];
    lc = stub2_[0];lw = stub2_[1];
    stub3_ = [this.marker_color, this.marker_size];
    mc = stub3_[0];ms = stub3_[1];
    stub4_ = [this.title, this.xlabel, this.ylabel];
    title = stub4_[0];xlabel = stub4_[1];ylabel = stub4_[2];
    ctx = this._context;
    stub5_ = [this.node.clientWidth, this.node.clientHeight];
    w = stub5_[0];h = stub5_[1];
    stub6_ = [Math.min.apply(null, xx), Math.max.apply(null, xx)];
    x1 = stub6_[0];x2 = stub6_[1];
    stub7_ = [Math.min.apply(null, yy), Math.max.apply(null, yy)];
    y1 = stub7_[0];y2 = stub7_[1];
    if (_pyfunc_truthy(xx)) {
        x1 -= _pyfunc_op_mult((x2 - x1), 0.02);
        x2=_pyfunc_op_add(x2, _pyfunc_op_mult((x2 - x1), 0.02))
    } else {
        stub8_ = [0, 1];
        x1 = stub8_[0];x2 = stub8_[1];
    }
    if (_pyfunc_truthy(yrange)) {
        stub9_ = yrange;
        y1 = stub9_[0];y2 = stub9_[1];
    } else if (_pyfunc_truthy(yy)) {
        y1 -= _pyfunc_op_mult((y2 - y1), 0.02);
        y2=_pyfunc_op_add(y2, _pyfunc_op_mult((y2 - y1), 0.02))
    } else {
        stub10_ = [0, 1];
        y1 = stub10_[0];y2 = stub10_[1];
    }
    lpad = rpad = bpad = tpad = 25.5;
    lpad=_pyfunc_op_add(lpad, 30)
    if (_pyfunc_truthy(title)) {
        tpad=_pyfunc_op_add(tpad, 10)
    }
    if (_pyfunc_truthy(xlabel)) {
        bpad=_pyfunc_op_add(bpad, 20)
    }
    if (_pyfunc_truthy(ylabel)) {
        lpad=_pyfunc_op_add(lpad, 20)
    }
    scale_x = ((w - lpad) - rpad) / (x2 - x1);
    scale_y = ((h - bpad) - tpad) / (y2 - y1);
    sxx = (function list_comprehension () {var res = [];var x, iter0, i0;iter0 = xx;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {x = iter0[i0];{res.push(_pyfunc_op_add(lpad, (_pyfunc_op_mult((x - x1), scale_x))));}}return res;}).apply(this);
    syy = (function list_comprehension () {var res = [];var y, iter0, i0;iter0 = yy;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {y = iter0[i0];{res.push(_pyfunc_op_add(bpad, (_pyfunc_op_mult((y - y1), scale_y))));}}return res;}).apply(this);
    x_ticks = this._get_ticks(scale_x, x1, x2);
    y_ticks = this._get_ticks(scale_y, y1, y2);
    sx_ticks = (function list_comprehension () {var res = [];var x, iter0, i0;iter0 = x_ticks;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {x = iter0[i0];{res.push(_pyfunc_op_add(lpad, (_pyfunc_op_mult((x - x1), scale_x))));}}return res;}).apply(this);
    sy_ticks = (function list_comprehension () {var res = [];var y, iter0, i0;iter0 = y_ticks;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {y = iter0[i0];{res.push(_pyfunc_op_add(bpad, (_pyfunc_op_mult((y - y1), scale_y))));}}return res;}).apply(this);
    ctx.clearRect(0, 0, w, h);
    ctx.fillStyle = "white";
    ctx.fillRect(lpad, tpad, (w - lpad) - rpad, (h - bpad) - tpad);
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.strokeStyle = "#444";
    stub11_seq = sx_ticks;
    if ((typeof stub11_seq === "object") && (!Array.isArray(stub11_seq))) {
        stub11_seq = Object.keys(stub11_seq);
    }
    for (stub12_itr = 0; stub12_itr < stub11_seq.length; stub12_itr += 1) {
        sx = stub11_seq[stub12_itr];
        ctx.moveTo(sx, h - bpad);
        ctx.lineTo(sx, (h - bpad) + 5);
    }
    stub13_seq = sy_ticks;
    if ((typeof stub13_seq === "object") && (!Array.isArray(stub13_seq))) {
        stub13_seq = Object.keys(stub13_seq);
    }
    for (stub14_itr = 0; stub14_itr < stub13_seq.length; stub14_itr += 1) {
        sy = stub13_seq[stub14_itr];
        ctx.moveTo(lpad, h - sy);
        ctx.lineTo(lpad - 5, h - sy);
    }
    ctx.stroke();
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.setLineDash([2, 2]);
    ctx.strokeStyle = "#ccc";
    stub15_seq = sx_ticks;
    if ((typeof stub15_seq === "object") && (!Array.isArray(stub15_seq))) {
        stub15_seq = Object.keys(stub15_seq);
    }
    for (stub16_itr = 0; stub16_itr < stub15_seq.length; stub16_itr += 1) {
        sx = stub15_seq[stub16_itr];
        ctx.moveTo(sx, h - bpad);
        ctx.lineTo(sx, tpad);
    }
    stub17_seq = sy_ticks;
    if ((typeof stub17_seq === "object") && (!Array.isArray(stub17_seq))) {
        stub17_seq = Object.keys(stub17_seq);
    }
    for (stub18_itr = 0; stub18_itr < stub17_seq.length; stub18_itr += 1) {
        sy = stub17_seq[stub18_itr];
        ctx.moveTo(lpad, h - sy);
        ctx.lineTo(w - rpad, h - sy);
    }
    ctx.stroke();
    ctx.setLineDash([]);
    ctx.font = "11px verdana";
    ctx.fillStyle = "black";
    ctx.textAlign = "center";
    ctx.textBaseline = "top";
    stub19_seq = _pyfunc_zip(x_ticks, sx_ticks);
    if ((typeof stub19_seq === "object") && (!Array.isArray(stub19_seq))) {
        stub19_seq = Object.keys(stub19_seq);
    }
    for (stub20_itr = 0; stub20_itr < stub19_seq.length; stub20_itr += 1) {
        stub21_tgt = stub19_seq[stub20_itr];
        x = stub21_tgt[0]; sx = stub21_tgt[1];
        ctx.fillText(x, sx, (h - bpad) + 8);
    }
    ctx.textAlign = "end";
    ctx.textBaseline = "middle";
    stub22_seq = _pyfunc_zip(y_ticks, sy_ticks);
    if ((typeof stub22_seq === "object") && (!Array.isArray(stub22_seq))) {
        stub22_seq = Object.keys(stub22_seq);
    }
    for (stub23_itr = 0; stub23_itr < stub22_seq.length; stub23_itr += 1) {
        stub24_tgt = stub22_seq[stub23_itr];
        y = stub24_tgt[0]; sy = stub24_tgt[1];
        ctx.fillText(y, lpad - 8, h - sy);
    }
    ctx.textAlign = "center";
    if (_pyfunc_truthy(title)) {
        ctx.font = "20px verdana";
        ctx.textBaseline = "top";
        ctx.fillText(title, w / 2, 5);
    }
    if (_pyfunc_truthy(xlabel)) {
        ctx.font = "16px verdana";
        ctx.textBaseline = "bottom";
        ctx.fillText(xlabel, w / 2, h - 5);
    }
    if (_pyfunc_truthy(ylabel)) {
        ctx.save();
        ctx.translate(0, h / 2);
        ctx.rotate((-window.Math.PI) / 2);
        ctx.textBaseline = "top";
        ctx.fillText(ylabel, 0, 5);
        ctx.restore();
    }
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.strokeStyle = "#444";
    ctx.moveTo(lpad, tpad);
    ctx.lineTo(lpad, h - bpad);
    ctx.lineTo(w - rpad, h - bpad);
    ctx.stroke();
    if ((_pyfunc_truthy(lc) && _pyfunc_truthy(lw))) {
        ctx.beginPath();
        ctx.lineWidth = lw;
        ctx.strokeStyle = lc;
        ctx.moveTo(sxx[0], h - syy[0]);
        stub25_seq = _pyfunc_zip(sxx, syy);
        if ((typeof stub25_seq === "object") && (!Array.isArray(stub25_seq))) {
            stub25_seq = Object.keys(stub25_seq);
        }
        for (stub26_itr = 0; stub26_itr < stub25_seq.length; stub26_itr += 1) {
            stub27_tgt = stub25_seq[stub26_itr];
            x = stub27_tgt[0]; y = stub27_tgt[1];
            ctx.lineTo(x, h - y);
        }
        ctx.stroke();
    }
    if ((_pyfunc_truthy(mc) && _pyfunc_truthy(ms))) {
        ctx.fillStyle = mc;
        stub28_seq = _pyfunc_zip(sxx, syy);
        if ((typeof stub28_seq === "object") && (!Array.isArray(stub28_seq))) {
            stub28_seq = Object.keys(stub28_seq);
        }
        for (stub29_itr = 0; stub29_itr < stub28_seq.length; stub29_itr += 1) {
            stub30_tgt = stub28_seq[stub29_itr];
            x = stub30_tgt[0]; y = stub30_tgt[1];
            ctx.beginPath();
            ctx.arc(x, h - y, ms / 2, 0, _pyfunc_op_mult(2, window.Math.PI));
            ctx.fill();
        }
    }
    return null;
};

PlotWidget.prototype.init = function () {
    var e, i, stub1_seq, stub2_itr;
    flexx.classes.CanvasWidget.prototype.init.call(this);
    this._context = this.node.getContext("2d");
    this._tick_units = [];
    for (e = -10; e < 10; e += 1) {
        stub1_seq = [10, 20, 25, 50];
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
            stub1_seq = Object.keys(stub1_seq);
        }
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            i = stub1_seq[stub2_itr];
            _pymeth_append.call(this._tick_units, (_pyfunc_op_mult(i, Math.pow(10, e))));
        }
    }
    return null;
};

PlotWidget.prototype.line_color = function (v) {
    v = (v === undefined) ? "blue": v;
    return _pyfunc_str(v);
};
PlotWidget.prototype.line_color.nobind = true;
PlotWidget.prototype.line_color.default = "blue";
PlotWidget.prototype.line_color.emitter_type = "Property";

PlotWidget.prototype.line_width = function (v) {
    v = (v === undefined) ? 2: v;
    return _pyfunc_float(v);
};
PlotWidget.prototype.line_width.nobind = true;
PlotWidget.prototype.line_width.default = 2;
PlotWidget.prototype.line_width.emitter_type = "Property";

PlotWidget.prototype.marker_color = function (v) {
    v = (v === undefined) ? "blue": v;
    return _pyfunc_str(v);
};
PlotWidget.prototype.marker_color.nobind = true;
PlotWidget.prototype.marker_color.default = "blue";
PlotWidget.prototype.marker_color.emitter_type = "Property";

PlotWidget.prototype.marker_size = function (v) {
    v = (v === undefined) ? 6: v;
    return _pyfunc_float(v);
};
PlotWidget.prototype.marker_size.nobind = true;
PlotWidget.prototype.marker_size.default = 6;
PlotWidget.prototype.marker_size.emitter_type = "Property";

PlotWidget.prototype.update = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    window.requestAnimationFrame(this._update);
    return null;
};
PlotWidget.prototype.update.nobind = true;
PlotWidget.prototype.update._connection_strings = ["xdata", "ydata", "yrange", "line_color", "line_width", "marker_color", "marker_size", "xlabel", "ylabel", "title", "size"];

PlotWidget.prototype.xdata = function (v) {
    v = (v === undefined) ? []: v;
    return (function list_comprehension () {var res = [];var f, iter0, i0;iter0 = v;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {f = iter0[i0];{res.push(_pyfunc_float(f));}}return res;}).apply(this);
};
PlotWidget.prototype.xdata.nobind = true;
PlotWidget.prototype.xdata.default = [];
PlotWidget.prototype.xdata.emitter_type = "Property";

PlotWidget.prototype.xlabel = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
PlotWidget.prototype.xlabel.nobind = true;
PlotWidget.prototype.xlabel.default = "";
PlotWidget.prototype.xlabel.emitter_type = "Property";

PlotWidget.prototype.ydata = function (v) {
    v = (v === undefined) ? []: v;
    return (function list_comprehension () {var res = [];var f, iter0, i0;iter0 = v;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {f = iter0[i0];{res.push(_pyfunc_float(f));}}return res;}).apply(this);
};
PlotWidget.prototype.ydata.nobind = true;
PlotWidget.prototype.ydata.default = [];
PlotWidget.prototype.ydata.emitter_type = "Property";

PlotWidget.prototype.ylabel = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
PlotWidget.prototype.ylabel.nobind = true;
PlotWidget.prototype.ylabel.default = "";
PlotWidget.prototype.ylabel.emitter_type = "Property";

PlotWidget.prototype.yrange = function (v) {
    v = (v === undefined) ? null: v;
    if ((v !== null)) {
        v = _pyfunc_list(((function list_comprehension () {var res = [];var f, iter0, i0;iter0 = v;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {f = iter0[i0];{res.push(_pyfunc_float(f));}}return res;}).apply(this)));
        if (!(_pyfunc_op_equals(v.length, 2))) {throw "AssertionError: " + "_pyfunc_op_equals(v.length, 2)";}
    }
    return v;
};
PlotWidget.prototype.yrange.nobind = true;
PlotWidget.prototype.yrange.default = null;
PlotWidget.prototype.yrange.emitter_type = "Property";



return {PlotWidget: PlotWidget};
});
