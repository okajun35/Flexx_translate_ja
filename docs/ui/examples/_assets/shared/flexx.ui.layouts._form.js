/* ======================= flexx.ui.layouts._form =======================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.layouts._form", ["pyscript-std.js", "flexx.ui.layouts._layout"], function (_py, flexx_ui_layouts__layout) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;





var BaseTableLayout = flexx.classes.BaseTableLayout = function () {
    _pyfunc_op_instantiate(this, arguments);
}
BaseTableLayout.prototype = Object.create(flexx.classes.Layout.prototype);
BaseTableLayout.prototype._base_class = flexx.classes.Layout.prototype;
BaseTableLayout.prototype._class_name = "BaseTableLayout";

BaseTableLayout.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
BaseTableLayout.prototype.__handlers__ = ["_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_adapt_to_size_change", "check_size"];
BaseTableLayout.prototype.__local_properties__ = ["parent", "size"];
BaseTableLayout.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "parent", "pos", "size", "style", "tabindex", "title"];

BaseTableLayout.prototype._adapt_to_size_change = function () {
    var cum_vflex, events, i, remainingHeight, remainingPercentage, row, table;
    events = Array.prototype.slice.call(arguments);
    table = this.node;
    if ((!_pyfunc_op_equals((events[events.length -1].new_value[1]), (events[0].old_value[1])))) {
        for (i = 0; i < table.children.length; i += 1) {
            row = table.children[i];
            if (_pyfunc_truthy(row.vflex > 0)) {
                row.style.height = "100%";
                break;
            }
        }
        remainingHeight = table.clientHeight;
        cum_vflex = 0;
        for (i = 0; i < table.children.length; i += 1) {
            row = table.children[i];
            cum_vflex=_pyfunc_op_add(cum_vflex, row.vflex)
            if ((_pyfunc_op_equals(row.vflex, 0) && _pyfunc_truthy(row.children.length > 0))) {
                remainingHeight -= row.children[0].clientHeight;
            }
        }
        remainingPercentage = _pyfunc_op_mult(100, remainingHeight) / table.clientHeight;
        for (i = 0; i < table.children.length; i += 1) {
            row = table.children[i];
            if (_pyfunc_truthy(row.vflex > 0)) {
                row.style.height = ((_pyfunc_round((_pyfunc_op_mult((row.vflex / cum_vflex), remainingPercentage)))) + 1) + "%";
            }
        }
    }
    return null;
};
BaseTableLayout.prototype._adapt_to_size_change.nobind = true;
BaseTableLayout.prototype._adapt_to_size_change._connection_strings = ["size"];

BaseTableLayout.prototype._apply_cell_layout = function (row, col, vflex, hflex, cum_vflex, cum_hflex) {
    var err_1;
    err_1 = new Error('NotImplementedError:' + ""); err_1.name = "NotImplementedError"; throw err_1;
    return null;
};

BaseTableLayout.prototype._apply_table_layout = function () {
    var AUTOFLEX, col, cum_hflex, cum_vflex, hflexes, i, j, ncols, nrows, row, table, vflexes;
    table = this.node;
    AUTOFLEX = 729;
    nrows = table.children.length;
    ncols = 0;
    for (i = 0; i < table.children.length; i += 1) {
        row = table.children[i];
        ncols = Math.max(ncols, row.children.length);
    }
    if ((_pyfunc_op_equals(ncols, 0) && _pyfunc_op_equals(nrows, 0))) {
        return null;
    }
    vflexes = [];
    hflexes = [];
    for (i = 0; i < nrows; i += 1) {
        row = table.children[i];
        for (j = 0; j < ncols; j += 1) {
            col = row.children[j];
            if (((col === undefined) || _pyfunc_op_equals(col.children.length, 0))) {
                continue;
            }
            vflexes[i] = Math.max((_pyfunc_truthy(vflexes[i]) || 0), (_pyfunc_truthy(col.children[0].vflex) || 0));
            hflexes[j] = Math.max((_pyfunc_truthy(hflexes[j]) || 0), (_pyfunc_truthy(col.children[0].hflex) || 0));
        }
    }
    cum_vflex = vflexes.reduce((function (pv, cv) {return _pyfunc_op_add(pv, cv);}).bind(this), 0);
    cum_hflex = hflexes.reduce((function (pv, cv) {return _pyfunc_op_add(pv, cv);}).bind(this), 0);
    if (_pyfunc_op_equals(cum_vflex, 0)) {
        for (i = 0; i < vflexes.length; i += 1) {
            vflexes[i] = AUTOFLEX;
        }
        cum_vflex = _pyfunc_op_mult(vflexes.length, AUTOFLEX);
    }
    if (_pyfunc_op_equals(cum_hflex, 0)) {
        for (i = 0; i < hflexes.length; i += 1) {
            hflexes[i] = AUTOFLEX;
        }
        cum_hflex = _pyfunc_op_mult(hflexes.length, AUTOFLEX);
    }
    for (i = 0; i < nrows; i += 1) {
        row = table.children[i];
        row.vflex = _pyfunc_truthy(vflexes[i]) || 0;
        for (j = 0; j < ncols; j += 1) {
            col = row.children[j];
            if (((col === undefined) || (col.children.length === 0))) {
                continue;
            }
            this._apply_cell_layout(row, col, vflexes[i], hflexes[j], cum_vflex, cum_hflex);
        }
    }
    return null;
};



var FormLayout = flexx.classes.FormLayout = function () {
    _pyfunc_op_instantiate(this, arguments);
}
FormLayout.prototype = Object.create(flexx.classes.BaseTableLayout.prototype);
FormLayout.prototype._base_class = flexx.classes.BaseTableLayout.prototype;
FormLayout.prototype._class_name = "FormLayout";

FormLayout.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
FormLayout.prototype.__handlers__ = ["_FormLayout__update_flexes", "_FormLayout__update_titles", "_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_adapt_to_size_change", "check_size"];
FormLayout.prototype.__local_properties__ = ["parent", "size"];
FormLayout.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "parent", "pos", "size", "style", "tabindex", "title"];

FormLayout.prototype._FormLayout__update_flexes = function () {
    var events, stub1_seq, stub2_itr, widget;
    events = Array.prototype.slice.call(arguments);
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        widget = stub1_seq[stub2_itr];
        widget.outernode.vflex = widget.flex[1];
    }
    this._apply_table_layout();
    return null;
};
FormLayout.prototype._FormLayout__update_flexes.nobind = true;
FormLayout.prototype._FormLayout__update_flexes._connection_strings = ["children", "children*.flex"];

FormLayout.prototype._FormLayout__update_titles = function () {
    var events, stub1_seq, stub2_itr, widget;
    events = Array.prototype.slice.call(arguments);
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        widget = stub1_seq[stub2_itr];
        if (_pyfunc_hasattr(widget, "_title_elem")) {
            widget._title_elem.innerHTML = widget.title;
        }
    }
    return null;
};
FormLayout.prototype._FormLayout__update_titles.nobind = true;
FormLayout.prototype._FormLayout__update_titles._connection_strings = ["children", "children*.title"];

FormLayout.prototype._add_child = function (widget) {
    var row, td;
    row = window.document.createElement("tr");
    this.node.appendChild(row);
    td = window.document.createElement("td");
    td.classList.add("flx-title");
    row.appendChild(td);
    widget._title_elem = td;
    td.innerHTML = widget.title;
    td = window.document.createElement("td");
    row.appendChild(td);
    td.appendChild(widget.outernode);
    widget.outernode.hflex = 1;
    widget.outernode.vflex = widget.flex[1];
    this._apply_table_layout();
    return null;
};

FormLayout.prototype._apply_cell_layout = function (row, col, vflex, hflex, cum_vflex, cum_hflex) {
    var AUTOFLEX, className;
    AUTOFLEX = 729;
    className = "";
    if ((_pyfunc_op_equals(vflex, AUTOFLEX) || _pyfunc_op_equals(vflex, 0))) {
        row.style.height = "auto";
        className=_pyfunc_op_add(className, "")
    } else {
        row.style.height = (_pyfunc_op_mult(vflex, 100) / cum_vflex) + "%";
        className=_pyfunc_op_add(className, "flx-vflex")
    }
    className=_pyfunc_op_add(className, " ")
    if (_pyfunc_op_equals(hflex, 0)) {
        col.style.width = "auto";
        className=_pyfunc_op_add(className, "")
    } else {
        col.style.width = "100%";
        className=_pyfunc_op_add(className, "flx-hflex")
    }
    col.className = className;
    return null;
};

FormLayout.prototype._init_phosphor_and_node = function () {
    this.phosphor = this._create_phosphor_widget("table");
    this.node = this.phosphor.node;
    return null;
};

FormLayout.prototype._remove_child = function (widget) {
    var row;
    row = widget.outernode.parentNode.parentNode;
    this.node.removeChild(row);
    if (_pyfunc_truthy(widget._title_elem)) {
        delete widget._title_elem;
    }
    return null;
};



return {BaseTableLayout: BaseTableLayout, FormLayout: FormLayout};
});
