/* ============================ app_splines =============================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("app_splines", ["pyscript-std.js", "flexx.ui.widgets._canvas", "flexx.ui._widget"], function (_py, flexx_ui_widgets__canvas, flexx_ui__widget) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;





var SplineWidget = flexx.classes.SplineWidget = function () {
    _pyfunc_op_instantiate(this, arguments);
}
SplineWidget.prototype = Object.create(flexx.classes.CanvasWidget.prototype);
SplineWidget.prototype._base_class = flexx.classes.CanvasWidget.prototype;
SplineWidget.prototype._class_name = "SplineWidget";

SplineWidget.prototype.SPLINES = ["linear", "basis", "cardinal", "catmullrom", "lagrange", "lanczos"];
SplineWidget.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
SplineWidget.prototype.__handlers__ = ["_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_on_mouse_down", "_on_mouse_move", "_on_mouse_up", "_update_canvas_size", "check_size", "update"];
SplineWidget.prototype.__local_properties__ = ["_current_node", "parent", "size"];
SplineWidget.prototype.__properties__ = ["_current_node", "base_size", "children", "closed", "container", "css_class", "flex", "icon", "parent", "pos", "size", "spline_type", "style", "tabindex", "tension", "title"];

SplineWidget.prototype._current_node = function (v) {
    v = (v === undefined) ? null: v;
    return v;
};
SplineWidget.prototype._current_node.nobind = true;
SplineWidget.prototype._current_node.default = null;
SplineWidget.prototype._current_node.emitter_type = "Property";

SplineWidget.prototype._on_mouse_down = function () {
    var a1, a2, closest, d, dist, ev, events, h, i, m1, m2, m3, p0, p1, p2, stub1_, stub2_, stub3_, stub4_, stub5_seq, stub6_itr, v1, v2, v3, w, x, y;
    events = Array.prototype.slice.call(arguments);
    stub5_seq = events;
    if ((typeof stub5_seq === "object") && (!Array.isArray(stub5_seq))) {
        stub5_seq = Object.keys(stub5_seq);
    }
    for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {
        ev = stub5_seq[stub6_itr];
        stub1_ = this.size;
        w = stub1_[0];h = stub1_[1];
        stub2_ = [-1, 999999];
        closest = stub2_[0];dist = stub2_[1];
        for (i = 0; i < this.xx.length; i += 1) {
            stub3_ = [_pyfunc_op_mult(this.xx[i], w), _pyfunc_op_mult(this.yy[i], h)];
            x = stub3_[0];y = stub3_[1];
            d = Math.pow((_pyfunc_op_add((Math.pow((x - ev.pos[0]), 2)), (Math.pow((y - ev.pos[1]), 2)))), 0.5);
            if (_pyfunc_truthy(d < dist)) {
                stub4_ = [i, d];
                closest = stub4_[0];dist = stub4_[1];
            }
        }
        if (_pyfunc_truthy(dist < 9)) {
            i = closest;
            if (_pyfunc_op_contains("Shift", ev.modifiers)) {
                _pymeth_pop.call(this.xx, i);
                _pymeth_pop.call(this.yy, i);
                this._current_node = null;
                this.update();
            } else {
                this._current_node = i;
            }
        } else if (_pyfunc_op_contains("Shift", ev.modifiers)) {
            if ((!_pyfunc_truthy(this.xx))) {
                i = 0;
            } else {
                p0 = [_pyfunc_op_mult(this.xx[closest + 0], w), _pyfunc_op_mult(this.yy[closest + 0], h)];
                if (_pyfunc_op_equals(closest, 0)) {
                    p2 = [_pyfunc_op_mult(this.xx[closest + 1], w), _pyfunc_op_mult(this.yy[closest + 1], h)];
                    p1 = [p0[0] - (p2[0] - p0[0]), p0[1] - (p2[1] - p0[1])];
                } else if ((_pyfunc_op_equals(closest, (this.xx.length - 1)))) {
                    p1 = [_pyfunc_op_mult(this.xx[closest - 1], w), _pyfunc_op_mult(this.yy[closest - 1], h)];
                    p2 = [p0[0] - (p1[0] - p0[0]), p0[1] - (p1[1] - p0[1])];
                } else {
                    p1 = [_pyfunc_op_mult(this.xx[closest - 1], w), _pyfunc_op_mult(this.yy[closest - 1], h)];
                    p2 = [_pyfunc_op_mult(this.xx[closest + 1], w), _pyfunc_op_mult(this.yy[closest + 1], h)];
                }
                v1 = [p1[0] - p0[0], p1[1] - p0[1]];
                v2 = [p2[0] - p0[0], p2[1] - p0[1]];
                v3 = [ev.pos[0] - p0[0], ev.pos[1] - p0[1]];
                m1 = Math.pow((_pyfunc_op_add(Math.pow(v1[0], 2), Math.pow(v1[1], 2))), 0.5);
                m2 = Math.pow((_pyfunc_op_add(Math.pow(v2[0], 2), Math.pow(v2[1], 2))), 0.5);
                m3 = Math.pow((_pyfunc_op_add(Math.pow(v3[0], 2), Math.pow(v3[1], 2))), 0.5);
                v1 = [v1[0] / m1, v1[1] / m1];
                v2 = [v2[0] / m2, v2[1] / m2];
                v3 = [v3[0] / m3, v3[1] / m3];
                a1 = window.Math.acos(_pyfunc_op_add(_pyfunc_op_mult(v1[0], v3[0]), _pyfunc_op_mult(v1[1], v3[1])));
                a2 = window.Math.acos(_pyfunc_op_add(_pyfunc_op_mult(v2[0], v3[0]), _pyfunc_op_mult(v2[1], v3[1])));
                i = (_pyfunc_truthy(a1 < a2))? (closest) : (closest + 1);
            }
            _pymeth_insert.call(this.xx, i, (ev.pos[0] / w));
            _pymeth_insert.call(this.yy, i, (ev.pos[1] / h));
            this._current_node = i;
        }
    }
    return null;
};
SplineWidget.prototype._on_mouse_down.nobind = true;
SplineWidget.prototype._on_mouse_down._connection_strings = ["mouse_down"];

SplineWidget.prototype._on_mouse_move = function () {
    var ev, events, h, i, stub1_, w;
    events = Array.prototype.slice.call(arguments);
    ev = events[events.length -1];
    if ((this._current_node !== null)) {
        i = this._current_node;
        stub1_ = this.size;
        w = stub1_[0];h = stub1_[1];
        this.xx[i] = ev.pos[0] / w;
        this.yy[i] = ev.pos[1] / h;
        this.update();
    }
    return null;
};
SplineWidget.prototype._on_mouse_move.nobind = true;
SplineWidget.prototype._on_mouse_move._connection_strings = ["mouse_move"];

SplineWidget.prototype._on_mouse_up = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this._current_node = null;
    return null;
};
SplineWidget.prototype._on_mouse_up.nobind = true;
SplineWidget.prototype._on_mouse_up._connection_strings = ["mouse_up"];

SplineWidget.prototype.closed = function (v) {
    return _pyfunc_bool(v);
};
SplineWidget.prototype.closed.nobind = true;
SplineWidget.prototype.closed.emitter_type = "Property";

SplineWidget.prototype.factors_basis = function (t) {
    var f0, f1, f2, f3;
    f0 = (Math.pow((1 - t), 3)) / 6.0;
    f1 = (((_pyfunc_op_mult(3, Math.pow(t, 3))) - (_pyfunc_op_mult(6, Math.pow(t, 2)))) + 4) / 6.0;
    f2 = ((_pyfunc_op_add((_pyfunc_op_add((_pyfunc_op_mult((-3), Math.pow(t, 3))), (_pyfunc_op_mult(3, Math.pow(t, 2))))), _pyfunc_op_mult(3, t))) + 1) / 6.0;
    f3 = Math.pow(t, 3) / 6.0;
    return [f0, f1, f2, f3];
};

SplineWidget.prototype.factors_cardinal = function (t) {
    var f0, f1, f2, f3, tau, tension;
    tension = this.tension;
    tau = _pyfunc_op_mult(0.5, (1 - tension));
    f0 = _pyfunc_op_mult((-tau), (_pyfunc_op_add((Math.pow(t, 3) - (_pyfunc_op_mult(2, Math.pow(t, 2)))), t)));
    f3 = _pyfunc_op_mult((+tau), (Math.pow(t, 3) - (_pyfunc_op_mult(1, Math.pow(t, 2)))));
    f1 = (((_pyfunc_op_mult(2, Math.pow(t, 3))) - (_pyfunc_op_mult(3, Math.pow(t, 2)))) + 1) - f3;
    f2 = (_pyfunc_op_add((_pyfunc_op_mult((-2), Math.pow(t, 3))), (_pyfunc_op_mult(3, Math.pow(t, 2))))) - f0;
    return [f0, f1, f2, f3];
};

SplineWidget.prototype.factors_catmullrom = function (t) {
    var f0, f1, f2, f3;
    f0 = (_pyfunc_op_add((_pyfunc_op_mult((-0.5), Math.pow(t, 3))), (_pyfunc_op_mult(1.0, Math.pow(t, 2))))) - _pyfunc_op_mult(0.5, t);
    f1 = ((_pyfunc_op_mult((+1.5), Math.pow(t, 3))) - (_pyfunc_op_mult(2.5, Math.pow(t, 2)))) + 1;
    f2 = _pyfunc_op_add((_pyfunc_op_add((_pyfunc_op_mult((-1.5), Math.pow(t, 3))), (_pyfunc_op_mult(2.0, Math.pow(t, 2))))), _pyfunc_op_mult(0.5, t));
    f3 = (_pyfunc_op_mult((+0.5), Math.pow(t, 3))) - (_pyfunc_op_mult(0.5, Math.pow(t, 2)));
    return [f0, f1, f2, f3];
};

SplineWidget.prototype.factors_lagrange = function (t) {
    var f0, f1, f2, f3, k;
    k = -1.0;
    f0 = (_pyfunc_op_mult(((_pyfunc_op_mult((t / k), (t - 1))) / (k - 1)), (t - 2))) / (k - 2);
    k = 0;
    f1 = (_pyfunc_op_mult(((_pyfunc_op_mult(((t + 1) / (k + 1)), (t - 1))) / (k - 1)), (t - 2))) / (k - 2);
    k = 1;
    f2 = (_pyfunc_op_mult(((_pyfunc_op_mult(((t + 1) / (k + 1)), t)) / k), (t - 2))) / (k - 2);
    k = 2;
    f3 = (_pyfunc_op_mult(((_pyfunc_op_mult(((t + 1) / (k + 1)), t)) / k), (t - 1))) / (k - 1);
    return [f0, f1, f2, f3];
};

SplineWidget.prototype.factors_lanczos = function (t) {
    var f0, f1, f2, f3, pi, sin, tt;
    sin = window.Math.sin;
    pi = window.Math.PI;
    tt = 1 + t;
    f0 = (_pyfunc_op_mult((_pyfunc_op_mult(2, (sin(_pyfunc_op_mult(pi, tt))))), (sin(_pyfunc_op_mult(pi, tt) / 2)))) / (_pyfunc_op_mult((_pyfunc_op_mult(_pyfunc_op_mult(pi, pi), tt)), tt));
    tt = 2 - t;
    f3 = (_pyfunc_op_mult((_pyfunc_op_mult(2, (sin(_pyfunc_op_mult(pi, tt))))), (sin(_pyfunc_op_mult(pi, tt) / 2)))) / (_pyfunc_op_mult((_pyfunc_op_mult(_pyfunc_op_mult(pi, pi), tt)), tt));
    if ((!_pyfunc_op_equals(t, 0))) {
        tt = t;
        f1 = (_pyfunc_op_mult((_pyfunc_op_mult(2, (sin(_pyfunc_op_mult(pi, tt))))), (sin(_pyfunc_op_mult(pi, tt) / 2)))) / (_pyfunc_op_mult((_pyfunc_op_mult(_pyfunc_op_mult(pi, pi), tt)), tt));
    } else {
        f1 = 1;
    }
    if ((!_pyfunc_op_equals(t, 1))) {
        tt = 1 - t;
        f2 = (_pyfunc_op_mult((_pyfunc_op_mult(2, (sin(_pyfunc_op_mult(pi, tt))))), (sin(_pyfunc_op_mult(pi, tt) / 2)))) / (_pyfunc_op_mult((_pyfunc_op_mult(_pyfunc_op_mult(pi, pi), tt)), tt));
    } else {
        f2 = 1;
    }
    return [f0, f1, f2, f3];
};

SplineWidget.prototype.factors_linear = function (t) {
    return [0, t, 1 - t, 0];
};

SplineWidget.prototype.init = function () {
    this.ctx = this.node.getContext("2d");
    this.xx = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.1, 0.23, 0.61, 0.88];
    this.yy = [0.9, 0.6, 0.9, 0.6, 0.9, 0.7, 0.55, 0.19, 0.11, 0.38];
    return null;
};

SplineWidget.prototype.spline_type = function (v) {
    var err_2;
    v = (v === undefined) ? "Cardinal": v;
    v = _pymeth_replace.call(_pymeth_lower.call(v), " ", "");
    if ((!_pyfunc_op_contains(v, this.SPLINES))) {
        err_2 = new Error('ValueError:' + "Invalid spline type"); err_2.name = "ValueError"; throw err_2;
    }
    return v;
};
SplineWidget.prototype.spline_type.nobind = true;
SplineWidget.prototype.spline_type.default = "Cardinal";
SplineWidget.prototype.spline_type.emitter_type = "Property";

SplineWidget.prototype.tension = function (v) {
    v = (v === undefined) ? 0.5: v;
    return _pyfunc_float(v);
};
SplineWidget.prototype.tension.nobind = true;
SplineWidget.prototype.tension.default = 0.5;
SplineWidget.prototype.tension.emitter_type = "Property";

SplineWidget.prototype.update = function () {
    var ctx, events, f0, f1, f2, f3, fun, h, i, lineto, n, stub1_, stub2_, stub3_, stub4_, stub5_, stub6_, stub7_seq, stub8_itr, support, t, w, x, x0, x1, x2, x3, xx, y, y0, y1, y2, y3, yy;
    events = Array.prototype.slice.call(arguments);
    ctx = this.ctx;
    stub1_ = this.size;
    w = stub1_[0];h = stub1_[1];
    ctx.clearRect(0, 0, w, h);
    xx = (function list_comprehension () {var res = [];var x, iter0, i0;iter0 = this.xx;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {x = iter0[i0];{res.push(_pyfunc_op_mult(x, w));}}return res;}).apply(this);
    yy = (function list_comprehension () {var res = [];var y, iter0, i0;iter0 = this.yy;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {y = iter0[i0];{res.push(_pyfunc_op_mult(y, h));}}return res;}).apply(this);
    if (_pyfunc_truthy(this.closed)) {
        xx = _pyfunc_op_add((_pyfunc_op_add(xx.slice(-1), xx)), xx.slice(0,2));
        yy = _pyfunc_op_add((_pyfunc_op_add(yy.slice(-1), yy)), yy.slice(0,2));
    } else {
        xx = _pyfunc_op_add((_pyfunc_op_add(([xx[0] - (xx[1] - xx[0])]), xx)), ([xx[xx.length -1] - (xx[xx.length -2] - xx[xx.length -1])]));
        yy = _pyfunc_op_add((_pyfunc_op_add(([yy[0] - (yy[1] - yy[0])]), yy)), ([yy[yy.length -1] - (yy[yy.length -2] - yy[yy.length -1])]));
    }
    ctx.strokeStyle = "#eee";
    ctx.lineWidth = 1;
    for (y = 0; y < h; y += 20) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(w, y);
        ctx.stroke();
    }
    for (x = 0; x < w; x += 20) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, h);
        ctx.stroke();
    }
    ctx.fillStyle = "#acf";
    ctx.strokeStyle = "#000";
    ctx.lineWidth = 2;
    for (i = 1; i < xx.length - 1; i += 1) {
        ctx.beginPath();
        ctx.arc(xx[i], yy[i], 9, 0, 6.2831);
        ctx.fill();
        ctx.stroke();
    }
    fun = this["factors_" + this.spline_type];
    if ((!_pyfunc_truthy(fun))) {
        fun = (function () {return [0, 1, 0, 0];}).bind(this);
    }
    for (i = 1; i < xx.length - 2; i += 1) {
        ctx.lineCap = "round";
        ctx.lineWidth = 3;
        ctx.strokeStyle = "#008";
        support = (_pyfunc_op_equals(this.spline_type, "linear"))? (1) : (2);
        if ((this._current_node !== null)) {
            if (_pyfunc_truthy((_pyfunc_truthy((i - (support + 1)) < this._current_node)) && (_pyfunc_truthy(this._current_node < _pyfunc_op_add(i, support))))) {
                ctx.strokeStyle = "#08F";
                ctx.lineWidth = 5;
            }
        }
        stub2_ = [xx[i - 1], yy[i - 1]];
        x0 = stub2_[0];y0 = stub2_[1];
        stub3_ = [xx[i + 0], yy[i + 0]];
        x1 = stub3_[0];y1 = stub3_[1];
        stub4_ = [xx[i + 1], yy[i + 1]];
        x2 = stub4_[0];y2 = stub4_[1];
        stub5_ = [xx[i + 2], yy[i + 2]];
        x3 = stub5_[0];y3 = stub5_[1];
        ctx.beginPath();
        lineto = ctx.lineTo.bind(ctx);
        n = 30;
        stub7_seq = (function list_comprehension () {var res = [];var i, iter0, i0;iter0 = _pyfunc_range(0, (n + 1), 1);if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {i = iter0[i0];{res.push(i / n);}}return res;}).apply(this);
        if ((typeof stub7_seq === "object") && (!Array.isArray(stub7_seq))) {
            stub7_seq = Object.keys(stub7_seq);
        }
        for (stub8_itr = 0; stub8_itr < stub7_seq.length; stub8_itr += 1) {
            t = stub7_seq[stub8_itr];
            stub6_ = fun(t);
            f0 = stub6_[0];f1 = stub6_[1];f2 = stub6_[2];f3 = stub6_[3];
            x = _pyfunc_op_add((_pyfunc_op_add((_pyfunc_op_add(_pyfunc_op_mult(x0, f0), _pyfunc_op_mult(x1, f1))), _pyfunc_op_mult(x2, f2))), _pyfunc_op_mult(x3, f3));
            y = _pyfunc_op_add((_pyfunc_op_add((_pyfunc_op_add(_pyfunc_op_mult(y0, f0), _pyfunc_op_mult(y1, f1))), _pyfunc_op_mult(y2, f2))), _pyfunc_op_mult(y3, f3));
            lineto(x, y);
            lineto = ctx.lineTo.bind(ctx);
        }
        ctx.stroke();
    }
    return null;
};
SplineWidget.prototype.update.nobind = true;
SplineWidget.prototype.update._connection_strings = ["size", "spline_type", "tension", "closed", "_current_node"];



var Splines = flexx.classes.Splines = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Splines.prototype = Object.create(flexx.classes.Widget.prototype);
Splines.prototype._base_class = flexx.classes.Widget.prototype;
Splines.prototype._class_name = "Splines";

Splines.prototype.BASIS_TEXT = "\nA B-spline is a C2 continuous non-interpolating spline, used extensively\nin (3D) modeling.\n";
Splines.prototype.CARDINAL_TEXT = "\nA Cardinal spline is a specific type of cubic Hermite spline, and is\nC1 continous. Its tension parameter makes it very versatile.\n";
Splines.prototype.CATMULLROM_TEXT = "\nThe Catmull\u2013Rom spline is a Cardinal spline with a tension of 0. It is \ncommonly used in computer graphics to interpolate motion between key frames.\n";
Splines.prototype.LAGRANGE_TEXT = "\nThe Lagrange polynomials result in (C0 continous) interpolation\nequivalent to Newton a polynomial. It is, however, know to suffer from\nRunge's phenomenon (oscilating).\n";
Splines.prototype.LANCZOS_TEXT = "\nLanczos interpolation (C1 continous) is based on a windowed sinc\nfunction and is usually considered to produced the best result from the\nperspective of the fourier domain. It's mainly used in applications\nrelated audio.\n";
Splines.prototype.LINEAR_TEXT = "\nThis is not really a spline, but its included for reference. Linear\ninterpolation is C0 continuous, and relatively easy to implement.\n";
Splines.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
Splines.prototype.__handlers__ = ["_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_closed", "_set_spline_type", "_set_tension", "check_size"];
Splines.prototype.__local_properties__ = ["parent", "size"];
Splines.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "parent", "pos", "size", "style", "tabindex", "title"];

Splines.prototype._set_closed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this.spline.closed = this.closed.checked;
    return null;
};
Splines.prototype._set_closed.nobind = true;
Splines.prototype._set_closed._connection_strings = ["closed.checked"];

Splines.prototype._set_spline_type = function () {
    var ev, events, type;
    events = Array.prototype.slice.call(arguments);
    ev = events[events.length -1];
    this.spline.spline_type = ev.source.text;
    type = this.spline.spline_type;
    this.explanation.text = this[_pymeth_upper.call(type) + "_TEXT"];
    if (_pyfunc_op_equals(type, "cardinal")) {
        this.tension.style = this.tension_label.style = "visibility: visible";
    } else {
        this.tension.style = this.tension_label.style = "visibility: hidden";
    }
    return null;
};
Splines.prototype._set_spline_type.nobind = true;
Splines.prototype._set_spline_type._connection_strings = ["b1.checked", "b2.checked", "b3.checked", "b4.checked", "b5.checked", "b6.checked"];

Splines.prototype._set_tension = function () {
    var events, t;
    events = Array.prototype.slice.call(arguments);
    t = this.tension.value;
    this.tension_label.text = "Tension: " + t;
    this.spline.tension = t;
    return null;
};
Splines.prototype._set_tension.nobind = true;
Splines.prototype._set_tension._connection_strings = ["tension.value"];



return {SplineWidget: SplineWidget, Splines: Splines};
});
