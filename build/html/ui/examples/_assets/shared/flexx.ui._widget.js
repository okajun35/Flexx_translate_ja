/* ========================== flexx.ui._widget ==========================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui._widget", ["pyscript-std.js", "flexx.app._model"], function (_py, flexx_app__model) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;

var _phosphor_messaging = flexx.require('phosphor/lib/core/messaging');
var _phosphor_panel = flexx.require('phosphor/lib/ui/panel');
var _phosphor_widget = flexx.require('phosphor/lib/ui/widget');



var Widget = flexx.classes.Widget = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Widget.prototype = Object.create(flexx.classes.Model.prototype);
Widget.prototype._base_class = flexx.classes.Model.prototype;
Widget.prototype._class_name = "Widget";

Widget.prototype.CAPTURE_MOUSE = false;
Widget.prototype.__emitters__ = ["key_down", "key_press", "key_up", "mouse_down", "mouse_move", "mouse_up", "mouse_wheel"];
Widget.prototype.__handlers__ = ["_Widget__children_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__make_singleton_container_widgets_work", "_Widget__style_changed", "_Widget__title_changed", "_Widget__update_tabindex", "check_size"];
Widget.prototype.__local_properties__ = ["parent", "size"];
Widget.prototype.__properties__ = ["base_size", "children", "container", "css_class", "flex", "icon", "parent", "pos", "size", "style", "tabindex", "title"];

Widget.prototype._Widget__children_changed = function () {
    var child, events, i, i_ok, new_children, old_children, stub1_seq, stub2_itr, stub3_seq, stub4_itr;
    events = Array.prototype.slice.call(arguments);
    new_children = events[events.length -1].new_value;
    old_children = events[0].old_value;
    i_ok = 0;
    for (i = 0; i < Math.min(new_children.length, old_children.length); i += 1) {
        if ((new_children[i] !== old_children[i])) {
            break;
        }
        i_ok = i;
    }
    stub1_seq = old_children.slice(i_ok);
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        child = stub1_seq[stub2_itr];
        this._remove_child(child);
    }
    stub3_seq = new_children.slice(i_ok);
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) {
        stub3_seq = Object.keys(stub3_seq);
    }
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        child = stub3_seq[stub4_itr];
        this._add_child(child);
    }
    return null;
};
Widget.prototype._Widget__children_changed.nobind = true;
Widget.prototype._Widget__children_changed._connection_strings = ["children"];

Widget.prototype._Widget__container_changed = function () {
    var el, err, events, id, style;
    events = Array.prototype.slice.call(arguments);
    id = events[events.length -1].new_value;
    _pymeth_remove.call(this.outernode.classList, "flx-main-widget");
    if (_pyfunc_truthy(_pyfunc_truthy(this.parent) || this.phosphor.parent)) {
        return null;
    }
    if (_pyfunc_truthy(this.phosphor.isAttached)) {
        try {
            _phosphor_widget.Widget.detach(this.phosphor);
        } catch(err_3) {
            {
                err = err_3;
                err.message=_pyfunc_op_add(err.message, " (" + this.id + ")")
                throw err;
            }
        }
    }
    if ((this.outernode.parentNode !== null)) {
        this.outernode.parentNode.removeChild(this.outernode);
    }
    if (_pyfunc_truthy(id)) {
        if (_pyfunc_op_equals(id, "body")) {
            el = window.document.body;
        } else {
            el = window.document.getElementById(id);
        }
        try {
            _phosphor_widget.Widget.attach(this.phosphor, el);
        } catch(err_3) {
            {
                err = err_3;
                err.message=_pyfunc_op_add(err.message, " (" + this.id + ")")
                throw err;
            }
        }
        window.addEventListener("resize", (function () {return [this.phosphor.update(), this._check_real_size()];}).bind(this));
    }
    if (_pyfunc_op_equals(id, "body")) {
        this.outernode.classList.add("flx-main-widget");
        window.document.title = _pyfunc_truthy(this.title) || "Flexx app";
    } else if (_pyfunc_truthy(id)) {
        style = this.style;
        window.setTimeout((function () {return [this._set_prop("style", ""), this._set_prop("style", style)];}).bind(this), 1);
    }
    return null;
};
Widget.prototype._Widget__container_changed.nobind = true;
Widget.prototype._Widget__container_changed._connection_strings = ["container"];

Widget.prototype._Widget__css_class_changed = function () {
    var cn, events, stub1_seq, stub2_itr, stub3_seq, stub4_itr;
    events = Array.prototype.slice.call(arguments);
    if (events.length) {
        stub1_seq = _pymeth_split.call((events[0].old_value), " ");
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
            stub1_seq = Object.keys(stub1_seq);
        }
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            cn = stub1_seq[stub2_itr];
            if (_pyfunc_truthy(cn)) {
                _pymeth_remove.call(this.outernode.classList, cn);
            }
        }
        stub3_seq = _pymeth_split.call((events[events.length -1].new_value), " ");
        if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) {
            stub3_seq = Object.keys(stub3_seq);
        }
        for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
            cn = stub3_seq[stub4_itr];
            if (_pyfunc_truthy(cn)) {
                this.outernode.classList.add(cn);
            }
        }
    }
    return null;
};
Widget.prototype._Widget__css_class_changed.nobind = true;
Widget.prototype._Widget__css_class_changed._connection_strings = ["css_class"];

Widget.prototype._Widget__icon_changed = function () {
    var events, link, oldLink;
    events = Array.prototype.slice.call(arguments);
    if (((this.parent === null) && _pyfunc_op_equals(this.container, "body"))) {
        window.document.title = _pyfunc_truthy(this.title) || "Flexx app";
        link = window.document.createElement("link");
        oldLink = window.document.getElementById("flexx-favicon");
        link.id = "flexx-favicon";
        link.rel = "shortcut icon";
        link.href = events[events.length -1].new_value;
        if (_pyfunc_truthy(oldLink)) {
            window.document.head.removeChild(oldLink);
        }
        window.document.head.appendChild(link);
    }
    return null;
};
Widget.prototype._Widget__icon_changed.nobind = true;
Widget.prototype._Widget__icon_changed._connection_strings = ["icon"];

Widget.prototype._Widget__make_singleton_container_widgets_work = function () {
    var children, events, subClassName;
    events = Array.prototype.slice.call(arguments);
    if ((!_pyfunc_op_contains("flx-Layout", this.outernode.className))) {
        _pymeth_remove.call(this.outernode.classList, "flx-hbox");
        _pymeth_remove.call(this.outernode.classList, "flx-vbox");
        _pymeth_remove.call(this.outernode.classList, "flx-abs-children");
        children = this.children;
        if (_pyfunc_op_equals(children.length, 1)) {
            subClassName = (children[0].outernode).className;
            if (_pyfunc_op_contains("flx-BoxLayout", subClassName)) {
                if (_pyfunc_op_contains("flx-VBox", subClassName)) {
                    this.outernode.classList.add("flx-hbox");
                } else {
                    this.outernode.classList.add("flx-vbox");
                }
            } else if (_pyfunc_op_contains("flx-BoxPanel", subClassName)) {
                this.outernode.classList.add("flx-abs-children");
            }
        }
    }
    return null;
};
Widget.prototype._Widget__make_singleton_container_widgets_work.nobind = true;
Widget.prototype._Widget__make_singleton_container_widgets_work._connection_strings = ["children"];

Widget.prototype._Widget__style_changed = function () {
    var d, ev, events, k, key, parent, part, size_limits_changed, size_limits_keys, stub10_itr, stub11_tgt, stub1_, stub2_, stub3_seq, stub4_itr, stub5_seq, stub6_itr, stub7_seq, stub8_itr, stub9_seq, style, v, val, values;
    events = Array.prototype.slice.call(arguments);
    d = {};
    stub5_seq = events;
    if ((typeof stub5_seq === "object") && (!Array.isArray(stub5_seq))) {
        stub5_seq = Object.keys(stub5_seq);
    }
    for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {
        ev = stub5_seq[stub6_itr];
        style = ev.new_value;
        if (_pyfunc_truthy(style)) {
            stub3_seq = _pymeth_split.call(style, ";");
            if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) {
                stub3_seq = Object.keys(stub3_seq);
            }
            for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
                part = stub3_seq[stub4_itr];
                if (_pyfunc_op_contains(":", part)) {
                    stub1_ = _pymeth_split.call(part, ":");
                    key = stub1_[0];val = stub1_[1];
                    stub2_ = [key.trim(), val.trim()];
                    key = stub2_[0];val = stub2_[1];
                    this.outernode.style[key] = val;
                    d[key] = val;
                }
            }
        }
    }
    size_limits_keys = ["min-width", "min-height", "max-width", "max-height"];
    size_limits_changed = false;
    stub7_seq = size_limits_keys;
    if ((typeof stub7_seq === "object") && (!Array.isArray(stub7_seq))) {
        stub7_seq = Object.keys(stub7_seq);
    }
    for (stub8_itr = 0; stub8_itr < stub7_seq.length; stub8_itr += 1) {
        key = stub7_seq[stub8_itr];
        if (_pyfunc_op_contains(key, d)) {
            size_limits_changed = true;
        }
    }
    if (_pyfunc_truthy(size_limits_changed)) {
        values = (function list_comprehension () {var res = [];var k, iter0, i0;iter0 = size_limits_keys;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {k = iter0[i0];{res.push(this.outernode.style[k]);}}return res;}).apply(this);
        stub9_seq = _pyfunc_zip(size_limits_keys, values);
        if ((typeof stub9_seq === "object") && (!Array.isArray(stub9_seq))) {
            stub9_seq = Object.keys(stub9_seq);
        }
        for (stub10_itr = 0; stub10_itr < stub9_seq.length; stub10_itr += 1) {
            stub11_tgt = stub9_seq[stub10_itr];
            k = stub11_tgt[0]; v = stub11_tgt[1];
            this.outernode.style[k] = v;
        }
        parent = this.parent;
        if (_pyfunc_truthy(parent)) {
            parent.phosphor.fit();
        }
        this.phosphor.update();
    }
    return null;
};
Widget.prototype._Widget__style_changed.nobind = true;
Widget.prototype._Widget__style_changed._connection_strings = ["style"];

Widget.prototype._Widget__title_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this.phosphor.title.label = events[events.length -1].new_value;
    if (((this.parent === null) && _pyfunc_op_equals(this.container, "body"))) {
        window.document.title = _pyfunc_truthy(this.title) || "Flexx app";
    }
    return null;
};
Widget.prototype._Widget__title_changed.nobind = true;
Widget.prototype._Widget__title_changed._connection_strings = ["title"];

Widget.prototype._Widget__update_tabindex = function () {
    var events, ti;
    events = Array.prototype.slice.call(arguments);
    ti = events[events.length -1].new_value;
    if ((ti === null)) {
        this.node.removeAttribute("tabIndex");
    } else {
        this.node.tabIndex = ti;
    }
    return null;
};
Widget.prototype._Widget__update_tabindex.nobind = true;
Widget.prototype._Widget__update_tabindex._connection_strings = ["tabindex"];

Widget.prototype.__init__ = function () {
    var _title_changed_in_phosphor, args, cls, cls_name, err_2, i, msg_hook, stub1_els, that;
    args = Array.prototype.slice.call(arguments);
    flexx.classes.Model.prototype.__init__.apply(this, args);
    this._init_phosphor_and_node();
    this.phosphor.id = this.id;
    this.outernode = this.phosphor.node;
    this._init_events();
    that = this;
    msg_hook = (function flx_msg_hook (handler, msg) {
        if (_pyfunc_op_equals(msg.type, "resize")) {
            that._check_real_size();
        } else if (_pyfunc_op_equals(msg.type, "close-request")) {
        } else if (_pyfunc_op_equals(msg.type, "child-added")) {
            if ((!_pyfunc_op_contains(msg.child.id, window.flexx.instances))) {
                if ((!_pyfunc_truthy(msg.child.node.classList.contains("p-TabBar")))) {
                    console.log(("Phosphor child " + _pyfunc_repr(msg.child.id) + " added to " + _pyfunc_repr(this.id) + " that is not managed by Flexx."));
                }
            } else if ((!_pyfunc_op_contains(window.flexx.instances[msg.child.id], this.children))) {
                console.log(("Phosphor child " + msg.child.id + " added without Flexx knowing"));
            }
        } else if (_pyfunc_op_equals(msg.type, "child-removed")) {
        }
        return true;
    }).bind(this);

    _phosphor_messaging.installMessageHook(this.phosphor, msg_hook);
    _title_changed_in_phosphor = (function flx__title_changed_in_phosphor (title) {
        this.title = title.label;
        return null;
    }).bind(this);

    this.phosphor.title.changed.connect(_title_changed_in_phosphor);
    cls_name = this._class_name;
    stub1_els = true;
    for (i = 0; i < 32; i += 1) {
        this.outernode.classList.add("flx-" + cls_name);
        cls = window.flexx.classes[cls_name];
        if ((!_pyfunc_truthy(cls))) {
            stub1_els = false; break;
        }
        cls_name = cls.prototype._base_class._class_name;
        if ((((!_pyfunc_truthy(cls_name))) || _pyfunc_op_equals(cls_name, "Model"))) {
            stub1_els = false; break;
        }
    } if (stub1_els) {
        err_2 = new Error('RuntimeError:' + ("Error determining class names for " + this.id + "")); err_2.name = "RuntimeError"; throw err_2;
    }
    return null;
};

Widget.prototype._add_child = function (widget) {
    var err;
    try {
        this.phosphor.addWidget(widget.phosphor);
    } catch(err_2) {
        {
            err = err_2;
            err.message=_pyfunc_op_add(err.message, " (" + this.id + ")")
            throw err;
        }
    }
    return null;
};

Widget.prototype._check_real_size = function (notify_parent) {
    var cursize, n;
    notify_parent = (notify_parent === undefined) ? false: notify_parent;
    n = this.outernode;
    cursize = this.size;
    if ((((!_pyfunc_op_equals(cursize[0], n.clientWidth))) || (!_pyfunc_op_equals(cursize[1], n.clientHeight)))) {
        this._set_prop("size", [n.clientWidth, n.clientHeight]);
        if ((_pyfunc_truthy(notify_parent) && _pyfunc_truthy(this.parent))) {
            if (_pyfunc_truthy(this.parent.let_children_check_size)) {
                this.parent.let_children_check_size();
            }
        }
    }
    return null;
};

Widget.prototype._create_key_event = function (e) {
    var key, modifiers;
    modifiers = (function list_comprehension () {var res = [];var n, iter0, i0;iter0 = ["Alt", "Shift", "Ctrl", "Meta"];if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {n = iter0[i0];if (!(e[_pymeth_lower.call(n) + "Key"])) {continue;}{res.push(n);}}return res;}).apply(this);
    key = e.key;
    if (_pyfunc_truthy(((!_pyfunc_truthy(key))) && _pyfunc_truthy(e.code))) {
        key = e.code;
        if (_pymeth_startswith.call(key, "Key")) {
            key = key.slice(3);
            if ((!_pyfunc_op_contains("Shift", modifiers))) {
                key = _pymeth_lower.call(key);
            }
        } else if (_pymeth_startswith.call(key, "Digit")) {
            key = key.slice(5);
        }
    }
    key = _pymeth_get.call({"Esc": "Escape", "Del": "Delete"}, key, key);
    return {key:key, modifiers:modifiers};
};

Widget.prototype._create_mouse_event = function (e) {
    var button, buttons, buttons_mask, modifiers, offset, pos, rect;
    modifiers = (function list_comprehension () {var res = [];var n, iter0, i0;iter0 = ["Alt", "Shift", "Ctrl", "Meta"];if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {n = iter0[i0];if (!(e[_pymeth_lower.call(n) + "Key"])) {continue;}{res.push(n);}}return res;}).apply(this);
    pos = [e.clientX, e.clientY];
    rect = this.node.getBoundingClientRect();
    offset = [rect.left, rect.top];
    pos = [_pyfunc_float((pos[0] - offset[0])), _pyfunc_float((pos[1] - offset[1]))];
    if (_pyfunc_truthy(e.buttons)) {
        buttons_mask = _pymeth_join.call((_pyfunc_reversed(((function list_comprehension () {var res = [];var c, iter0, i0;iter0 = e.buttons.toString(2);if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {c = iter0[i0];{res.push(c);}}return res;}).apply(this)))), "");
    } else {
        buttons_mask = [e.button.toString(2)];
    }
    buttons = (function list_comprehension () {var res = [];var i, iter0, i0;iter0 = _pyfunc_range(0, 5, 1);if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {i = iter0[i0];if (!(_pyfunc_op_equals(buttons_mask[i], "1"))) {continue;}{res.push(i + 1);}}return res;}).apply(this);
    button = {0: 1, 1: 3, 2: 2, 3: 4, 4: 5}[e.button];
    return {pos:pos, page_pos:[e.pageX, e.pageY], button:button, buttons:buttons, modifiers:modifiers};
};

Widget.prototype._create_phosphor_widget = function (element_name) {
    var node;
    element_name = (element_name === undefined) ? "div": element_name;
    node = window.document.createElement(element_name);
    return new _phosphor_widget.Widget({"node": node});
};

Widget.prototype._init_events = function () {
    var capture, mouse_inside, mouse_outside, release;
    this.node.addEventListener("mousedown", this.mouse_down, 0);
    this.node.addEventListener("wheel", this.mouse_wheel, 0);
    this.node.addEventListener("keydown", this.key_down, 0);
    this.node.addEventListener("keyup", this.key_up, 0);
    this.node.addEventListener("keypress", this.key_press, 0);
    this._capture_flag = null;
    capture = (function flx_capture (e) {
        if ((_pyfunc_truthy(this.CAPTURE_MOUSE) && _pyfunc_truthy(this.node.setCapture))) {
            this.node.setCapture();
        }
        this._capture_flag = 2;
        window.document.addEventListener("mousemove", mouse_outside, true);
        window.document.addEventListener("mouseup", mouse_outside, true);
        return null;
    }).bind(this);

    release = (function flx_release () {
        this._capture_flag = 1;
        window.document.removeEventListener("mousemove", mouse_outside, true);
        window.document.removeEventListener("mouseup", mouse_outside, true);
        return null;
    }).bind(this);

    mouse_inside = (function flx_mouse_inside (e) {
        if (_pyfunc_op_equals(this._capture_flag, 1)) {
            this._capture_flag = 0;
        } else if ((!_pyfunc_truthy(this._capture_flag))) {
            if (_pyfunc_op_equals(e.type, "mousemove")) {
                this.mouse_move(e);
            } else if (_pyfunc_op_equals(e.type, "mouseup")) {
                this.mouse_up(e);
            }
        }
        return null;
    }).bind(this);

    mouse_outside = (function flx_mouse_outside (e) {
        if (_pyfunc_truthy(this._capture_flag)) {
            e = (_pyfunc_truthy(window.event))? (window.event) : (e);
            if (_pyfunc_op_equals(e.type, "mousemove")) {
                this.mouse_move(e);
            } else if (_pyfunc_op_equals(e.type, "mouseup")) {
                release();
                this.mouse_up(e);
            }
        }
        return null;
    }).bind(this);

    this.node.addEventListener("mousedown", capture, true);
    this.node.addEventListener("losecapture", release);
    this.node.addEventListener("mousemove", mouse_inside, false);
    this.node.addEventListener("mouseup", mouse_inside, false);
    return null;
};

Widget.prototype._init_phosphor_and_node = function () {
    this.phosphor = new _phosphor_panel.Panel();
    this.node = this.phosphor.node;
    return null;
};

Widget.prototype._new_event_type_hook = function (event_type) {
    if ((this.tabindex === null)) {
        if (_pyfunc_op_contains(event_type, ["key_down", "key_up", "key_press"])) {
            this.tabindex = -1;
        }
    }
    flexx.classes.Model.prototype._new_event_type_hook.call(this, event_type);
    return null;
};

Widget.prototype._remove_child = function (widget) {
    widget.phosphor.parent = null;
    return null;
};

Widget.prototype._set_size = function (prefix, w, h) {
    var i, size;
    size = [w, h];
    for (i = 0; i < 2; i += 1) {
        if ((_pyfunc_truthy(size[i] <= 0) || (size === null) || (size === undefined))) {
            size[i] = "";
        } else if (_pyfunc_truthy(size[i] > 1)) {
            size[i] = size[i] + "px";
        } else {
            size[i] = _pyfunc_op_mult(size[i], 100) + "%";
        }
    }
    this.outernode.style[prefix + "width"] = size[0];
    this.outernode.style[prefix + "height"] = size[1];
    return null;
};

Widget.prototype.base_size = function (v) {
    v = (v === undefined) ? [32, 32]: v;
    if ((({}).toString.call(v).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'number')) {
        v = [v, v];
    }
    return [_pyfunc_float(v[0]), _pyfunc_float(v[1])];
};
Widget.prototype.base_size.nobind = true;
Widget.prototype.base_size.default = [32, 32];
Widget.prototype.base_size.emitter_type = "Property";

Widget.prototype.check_size = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    window.setTimeout(this._check_real_size, 0);
    return null;
};
Widget.prototype.check_size.nobind = true;
Widget.prototype.check_size._connection_strings = ["container", "parent.size", "children"];

Widget.prototype.children = function (new_children) {
    var child, err_2, old_children, stub1_seq, stub2_itr, stub3_seq, stub4_itr;
    new_children = (new_children === undefined) ? []: new_children;
    old_children = this.children;
    if ((!_pyfunc_truthy(old_children))) {
        old_children = [];
    }
    if (_pyfunc_op_equals(new_children.length, old_children.length)) {
        if ((_pyfunc_all(((function list_comprehension () {var res = [];var c1, c2, iter0, i0;iter0 = _pyfunc_zip(old_children, new_children);if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {c1 = iter0[i0][0]; c2 = iter0[i0][1];{res.push(c1 === c2);}}return res;}).apply(this))))) {
            return new_children;
        }
    }
    if ((!(_pyfunc_all(((function list_comprehension () {var res = [];var w, iter0, i0;iter0 = new_children;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {w = iter0[i0];{res.push(w instanceof Widget);}}return res;}).apply(this)))))) {
        err_2 = new Error('ValueError:' + ("" + this.id + ".children must all be widget objects.")); err_2.name = "ValueError"; throw err_2;
    }
    stub1_seq = old_children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        child = stub1_seq[stub2_itr];
        if ((!_pyfunc_op_contains(child, new_children))) {
            child.parent = null;
        }
    }
    stub3_seq = new_children;
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) {
        stub3_seq = Object.keys(stub3_seq);
    }
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        child = stub3_seq[stub4_itr];
        if ((!_pyfunc_op_contains(child, old_children))) {
            child.parent = this;
        }
    }
    return _pyfunc_list(new_children);
};
Widget.prototype.children.nobind = true;
Widget.prototype.children.default = [];
Widget.prototype.children.emitter_type = "Property";

Widget.prototype.container = function (v) {
    var err_2;
    v = (v === undefined) ? "": v;
    if ((!(({}).toString.call(v).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'string'))) {
        err_2 = new Error('ValueError:' + ("" + this.id + ".container should be a string.")); err_2.name = "ValueError"; throw err_2;
    }
    return _pyfunc_str(v);
};
Widget.prototype.container.nobind = true;
Widget.prototype.container.default = "";
Widget.prototype.container.emitter_type = "Property";

Widget.prototype.css_class = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
Widget.prototype.css_class.nobind = true;
Widget.prototype.css_class.default = "";
Widget.prototype.css_class.emitter_type = "Property";

Widget.prototype.flex = function (v) {
    v = (v === undefined) ? 0: v;
    if ((({}).toString.call(v).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'number')) {
        v = [v, v];
    }
    return [_pyfunc_float(v[0]), _pyfunc_float(v[1])];
};
Widget.prototype.flex.nobind = true;
Widget.prototype.flex.default = 0;
Widget.prototype.flex.emitter_type = "Property";

Widget.prototype.icon = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
Widget.prototype.icon.nobind = true;
Widget.prototype.icon.default = "";
Widget.prototype.icon.emitter_type = "Property";

Widget.prototype.key_down = function (e) {
    return this._create_key_event(e);
};
Widget.prototype.key_down.nobind = true;
Widget.prototype.key_down.emitter_type = "Emitter";

Widget.prototype.key_press = function (e) {
    return this._create_key_event(e);
};
Widget.prototype.key_press.nobind = true;
Widget.prototype.key_press.emitter_type = "Emitter";

Widget.prototype.key_up = function (e) {
    return this._create_key_event(e);
};
Widget.prototype.key_up.nobind = true;
Widget.prototype.key_up.emitter_type = "Emitter";

Widget.prototype.mouse_down = function (e) {
    return this._create_mouse_event(e);
};
Widget.prototype.mouse_down.nobind = true;
Widget.prototype.mouse_down.emitter_type = "Emitter";

Widget.prototype.mouse_move = function (e) {
    var ev;
    ev = this._create_mouse_event(e);
    ev.button = 0;
    return ev;
};
Widget.prototype.mouse_move.nobind = true;
Widget.prototype.mouse_move.emitter_type = "Emitter";

Widget.prototype.mouse_up = function (e) {
    var ev;
    ev = this._create_mouse_event(e);
    return ev;
};
Widget.prototype.mouse_up.nobind = true;
Widget.prototype.mouse_up.emitter_type = "Emitter";

Widget.prototype.mouse_wheel = function (e) {
    var ev;
    ev = this._create_mouse_event(e);
    ev.button = 0;
    ev.hscroll = _pyfunc_op_mult(e.deltaX, ([1, 16, 600][e.deltaMode]));
    ev.vscroll = _pyfunc_op_mult(e.deltaY, ([1, 16, 600][e.deltaMode]));
    return ev;
};
Widget.prototype.mouse_wheel.nobind = true;
Widget.prototype.mouse_wheel.emitter_type = "Emitter";

Widget.prototype.parent = function (new_parent) {
    var children, err_2, old_parent;
    new_parent = (new_parent === undefined) ? null: new_parent;
    old_parent = this.parent;
    if ((new_parent === old_parent)) {
        return new_parent;
    }
    if ((!((new_parent === null) || (new_parent instanceof Widget)))) {
        err_2 = new Error('ValueError:' + ("" + this.id + ".parent must be a Widget or None")); err_2.name = "ValueError"; throw err_2;
    }
    if ((old_parent !== null)) {
        children = _pyfunc_list(((_pyfunc_truthy(old_parent.children))? (old_parent.children) : ([])));
        while (_pyfunc_op_contains(this, children)) {
            _pymeth_remove.call(children, this);
        }
        old_parent.children = children;
    }
    if ((new_parent !== null)) {
        children = _pyfunc_list(((_pyfunc_truthy(new_parent.children))? (new_parent.children) : ([])));
        _pymeth_append.call(children, this);
        new_parent.children = children;
    }
    return new_parent;
};
Widget.prototype.parent.nobind = true;
Widget.prototype.parent.default = null;
Widget.prototype.parent.emitter_type = "Property";

Widget.prototype.pos = function (v) {
    v = (v === undefined) ? [0, 0]: v;
    return [_pyfunc_float(v[0]), _pyfunc_float(v[1])];
};
Widget.prototype.pos.nobind = true;
Widget.prototype.pos.default = [0, 0];
Widget.prototype.pos.emitter_type = "Property";

Widget.prototype.size = function (v) {
    v = (v === undefined) ? [0, 0]: v;
    return [v[0], v[1]];
};
Widget.prototype.size.nobind = true;
Widget.prototype.size.default = [0, 0];
Widget.prototype.size.emitter_type = "Readonly";

Widget.prototype.style = function (v) {
    v = (v === undefined) ? "": v;
    if ((({}).toString.call(v).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'object')) {
        v = (function list_comprehension () {var res = [];var k, v, iter0, i0;iter0 = _pymeth_items.call(v);if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {k = iter0[i0][0]; v = iter0[i0][1];{res.push("" + k + ": " + v + "");}}return res;}).apply(this);
        v = _pymeth_join.call("; ", v);
    }
    return _pyfunc_str(v);
};
Widget.prototype.style.nobind = true;
Widget.prototype.style.default = "";
Widget.prototype.style.emitter_type = "Property";

Widget.prototype.tabindex = function (v) {
    v = (v === undefined) ? null: v;
    if ((v === null)) {
        return null;
    }
    return _pyfunc_int(v);
};
Widget.prototype.tabindex.nobind = true;
Widget.prototype.tabindex.default = null;
Widget.prototype.tabindex.emitter_type = "Property";

Widget.prototype.title = function (v) {
    v = (v === undefined) ? "": v;
    return _pyfunc_str(v);
};
Widget.prototype.title.nobind = true;
Widget.prototype.title.default = "";
Widget.prototype.title.emitter_type = "Property";



return {Widget: Widget, _phosphor_messaging: _phosphor_messaging, _phosphor_panel: _phosphor_panel, _phosphor_widget: _phosphor_widget};
});
