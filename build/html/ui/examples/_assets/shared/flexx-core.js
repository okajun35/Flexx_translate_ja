/* Bundle contents:
- asset flexx-loader.js
- asset pyscript-std.js
- module flexx.app._clientcore
- module flexx.app._model
*/


/* ========================== flexx-loader.js ===========================*/

/*Flexx module loader. Licensed by BSD-2-clause.*/

(function(){

if (typeof window === 'undefined' && typeof module == 'object') {
    throw Error('flexx.app does not run on NodeJS!');
}
if (typeof flexx == 'undefined') {
    window.flexx = {};
}

var modules = {};
function define (name, deps, factory) {
    if (arguments.length == 1) {
        factory = name;
        deps = [];
        name = null;
    }
    if (arguments.length == 2) {
        factory = deps;
        deps = name;
        name = null;
    }
    // Get dependencies - in current implementation, these must be loaded
    var dep_vals = [];
    for (var i=0; i<deps.length; i++) {
        if (modules[deps[i]] === undefined) {
            throw Error('Unknown dependency: ' + deps[i]);
        }
        dep_vals.push(modules[deps[i]]);
    }
    // Load the module and store it if is not anonymous
    var mod = factory.apply(null, dep_vals);
    if (name) {
        modules[name] = mod;
    }
}
define.amd = true;
define.flexx = true;

function require (name) {
    if (name.startsWith('phosphor/')) {
        if (window.jupyter && window.jupyter.lab && window.jupyter.lab.loader) {
            var path = 'phosphor@*/' + name.slice(9);
            if (!path.endsWith('.js')) { path = path + '.js'; }
            return window.jupyter.lab.loader.require(path);
        } else {
            return window.require_phosphor(name);  // provided by our Phosphor-all
        }
    }
    if (modules[name] === undefined) {
        throw Error('Unknown module: ' + name);
    }
    return modules[name];
}

// Expose this
window.flexx.define = define;
window.flexx.require = require;
window.flexx._modules = modules;

})();


/* ========================== pyscript-std.js ===========================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */

flexx.define("pyscript-std.js", [], function () {

"use strict";

var _pyfunc_abs = Math.abs;
var _pyfunc_all = function (x) { // nargs: 1
    for (var i=0; i<x.length; i++) {
        if (!_pyfunc_truthy(x[i])){return false;}
    } return true;
};
var _pyfunc_any = function (x) { // nargs: 1
    for (var i=0; i<x.length; i++) {
        if (_pyfunc_truthy(x[i])){return true;}
    } return false;
};
var _pyfunc_bool = function (x) { // nargs: 1
    return Boolean(_pyfunc_truthy(x));
};
var _pyfunc_delattr = function (ob, name) {  // nargs: 2
    delete ob[name];
};
var _pyfunc_dict = function (x) {
    var t, i, keys, r={};
    if (Array.isArray(x)) {
        for (i=0; i<x.length; i++) {
            t=x[i]; r[t[0]] = t[1];
        }
    } else {
        keys = Object.keys(x);
        for (i=0; i<keys.length; i++) {
            t=keys[i]; r[t] = x[t];
        }
    }
    return r;
};
var _pyfunc_divmod = function (x, y) { // nargs: 2
    var m = x % y; return [(x-m)/y, m];
};
var _pyfunc_enumerate = function (iter) { // nargs: 1
    var i, res=[];
    if ((typeof iter==="object") && (!Array.isArray(iter))) {iter = Object.keys(iter);}
    for (i=0; i<iter.length; i++) {res.push([i, iter[i]]);}
    return res;
};
var _pyfunc_filter = function (func, iter) { // nargs: 2
    if (typeof func === "undefined" || func === null) {func = function(x) {return x;}}
    if ((typeof iter==="object") && (!Array.isArray(iter))) {iter = Object.keys(iter);}
    return iter.filter(func);
};
var _pyfunc_float = Number;
var _pyfunc_getattr = function (ob, name, deflt) { // nargs: 2 3
    var has_attr = ob !== undefined && ob !== null && ob[name] !== undefined;
    if (has_attr) {return ob[name];}
    else if (arguments.length == 3) {return deflt;}
    else {var e = Error(name); e.name='AttributeError'; throw e;}
};
var _pyfunc_hasattr = function (ob, name) { // nargs: 2
    return (ob !== undefined) && (ob !== null) && (ob[name] !== undefined);
};
var _pyfunc_int = function (x) { // nargs: 1
    return x<0 ? Math.ceil(x): Math.floor(x);
};
var _pyfunc_list = function (x) {
    var r=[];
    if (typeof x==="object" && !Array.isArray(x)) {x = Object.keys(x)}
    for (var i=0; i<x.length; i++) {
        r.push(x[i]);
    }
    return r;
};
var _pyfunc_map = function (func, iter) { // nargs: 2
    if (typeof func === "undefined" || func === null) {func = function(x) {return x;}}
    if ((typeof iter==="object") && (!Array.isArray(iter))) {iter = Object.keys(iter);}
    return iter.map(func);
};
var _pyfunc_op_add = function (a, b) { // nargs: 2
    if (Array.isArray(a) && Array.isArray(b)) {
        return a.concat(b);
    } return a + b;
};
var _pyfunc_op_contains = function op_contains (a, b) { // nargs: 2
    if (b == null) {
    } else if (Array.isArray(b)) {
        for (var i=0; i<b.length; i++) {if (_pyfunc_op_equals(a, b[i]))
                                           return true;}
        return false;
    } else if (b.constructor === Object) {
        for (var k in b) {if (a == k) return true;}
        return false;
    } else if (b.constructor == String) {
        return b.indexOf(a) >= 0;
    } var e = Error('Not a container: ' + b); e.name='TypeError'; throw e;
};
var _pyfunc_op_equals = function op_equals (a, b) { // nargs: 2
    if (a == null || b == null) {
    } else if (Array.isArray(a) && Array.isArray(b)) {
        var i = 0, iseq = a.length == b.length;
        while (iseq && i < a.length) {iseq = op_equals(a[i], b[i]); i+=1;}
        return iseq;
    } else if (a.constructor === Object && b.constructor === Object) {
        var akeys = Object.keys(a), bkeys = Object.keys(b);
        akeys.sort(); bkeys.sort();
        var i=0, k, iseq = op_equals(akeys, bkeys);
        while (iseq && i < akeys.length)
            {k=akeys[i]; iseq = op_equals(a[k], b[k]); i+=1;}
        return iseq;
    } return a == b;
};
var _pyfunc_op_instantiate = function (ob, args) { // nargs: 2
    if ((typeof ob === "undefined") ||
            (typeof window !== "undefined" && window === ob) ||
            (typeof global !== "undefined" && global === ob))
            {throw "Class constructor is called as a function.";}
    for (var name in ob) {
        if (Object[name] === undefined &&
            typeof ob[name] === 'function' && !ob[name].nobind) {
            ob[name] = ob[name].bind(ob);
            ob[name].__name__ = name;
        }
    }
    if (ob.__init__) {
        ob.__init__.apply(ob, args);
    }
};
var _pyfunc_op_mult = function (a, b) { // nargs: 2
    if ((typeof a === 'number') + (typeof b === 'number') === 1) {
        if (a.constructor === String) return _pymeth_repeat.call(a, b);
        if (b.constructor === String) return _pymeth_repeat.call(b, a);
        if (Array.isArray(b)) {var t=a; a=b; b=t;}
        if (Array.isArray(a)) {
            var res = []; for (var i=0; i<b; i++) res = res.concat(a);
            return res;
        }
    } return a * b;
};
var _pyfunc_perf_counter = function() { // nargs: 0
    if (typeof(process) === "undefined"){return performance.now()*1e-3;}
    else {var t = process.hrtime(); return t[0] + t[1]*1e-9;}
};
var _pyfunc_pow = Math.pow;
var _pyfunc_range = function (start, end, step) {
var i, res = [];
    var val = start;
    var n = (end - start) / step;
    for (i=0; i<n; i++) {
        res.push(val);
        val += step;
    }
    return res;
};
var _pyfunc_repr = function (x) { // nargs: 1
    var res = JSON.stringify(x);
    if (typeof res === 'undefined') { res = String(x); }
    return res;
};
var _pyfunc_reversed = function (iter) { // nargs: 1
    if ((typeof iter==="object") && (!Array.isArray(iter))) {iter = Object.keys(iter);}
    return iter.slice().reverse();
};
var _pyfunc_round = Math.round;
var _pyfunc_setattr = function (ob, name, value) {  // nargs: 3
    ob[name] = value;
};
var _pyfunc_sorted = function (iter, key, reverse) { // nargs: 1 2 3
    if ((typeof iter==="object") && (!Array.isArray(iter))) {iter = Object.keys(iter);}
    var comp = function (a, b) {a = key(a); b = key(b);
        if (a<b) {return -1;} if (a>b) {return 1;} return 0;};
    comp = Boolean(key) ? comp : undefined; 
    iter = iter.slice().sort(comp);
    if (reverse) iter.reverse();
    return iter;
};
var _pyfunc_str = String;
var _pyfunc_sum = function (x) {  // nargs: 1
    return x.reduce(function(a, b) {return a + b;});
};
var _pyfunc_time = function () {return Date.now() / 1000;};
var _pyfunc_truthy = function (v) {
    if (v === null || typeof v !== "object") {return v;}
    else if (v.length !== undefined) {return v.length ? v : false;}
    else if (v.byteLength !== undefined) {return v.byteLength ? v : false;}
    else if (v.constructor !== Object) {return true;}
    else {return Object.getOwnPropertyNames(v).length ? v : false;}
};
var _pyfunc_zip = function () { // nargs: 2 3 4 5 6 7 8 9
    var i, j, tup, arg, args = [], res = [], len = 1e20;
    for (i=0; i<arguments.length; i++) {
        arg = arguments[i];
        if ((typeof arg==="object") && (!Array.isArray(arg))) {arg = Object.keys(arg);}
        args.push(arg);
        len = Math.min(len, arg.length);
    }
    for (j=0; j<len; j++) {
        tup = []
        for (i=0; i<args.length; i++) {tup.push(args[i][j]);}
        res.push(tup);
    }
    return res;
};
var _pymeth_append = function (x) { // nargs: 1
    if (!Array.isArray(this)) return this.append.apply(this, arguments);
    this.push(x);
};
var _pymeth_capitalize = function () { // nargs: 0
    if (this.constructor !== String) return this.capitalize.apply(this, arguments);
    return this.slice(0, 1).toUpperCase() + this.slice(1).toLowerCase();
};
var _pymeth_casefold = function () { // nargs: 0
    if (this.constructor !== String) return this.casefold.apply(this, arguments);
    return this.toLowerCase();
};
var _pymeth_center = function (w, fill) { // nargs: 1 2
    if (this.constructor !== String) return this.center.apply(this, arguments);
    fill = (fill === undefined) ? ' ' : fill;
    var tofill = Math.max(0, w - this.length);
    var left = Math.ceil(tofill / 2);
    var right = tofill - left;
    return _pymeth_repeat.call(fill, left) + this + _pymeth_repeat.call(fill, right);
};
var _pymeth_clear = function () { // nargs: 0
    if (Array.isArray(this)) {
        this.splice(0, this.length);
    } else if (this.constructor === Object) {
        var keys = Object.keys(this);
        for (var i=0; i<keys.length; i++) delete this[keys[i]];
    } else return this.clear.apply(this, arguments);
};
var _pymeth_copy = function () { // nargs: 0
    if (Array.isArray(this)) {
        return this.slice(0);
    } else if (this.constructor === Object) {
        var key, keys = Object.keys(this), res = {};
        for (var i=0; i<keys.length; i++) {key = keys[i]; res[key] = this[key];}
        return res;
    } else return this.copy.apply(this, arguments);
};
var _pymeth_count = function (x, start, stop) { // nargs: 1 2 3
    start = (start === undefined) ? 0 : start;
    stop = (stop === undefined) ? this.length : stop;
    start = Math.max(0, ((start < 0) ? this.length + start : start));
    stop = Math.min(this.length, ((stop < 0) ? this.length + stop : stop));
    if (Array.isArray(this)) {
        var count = 0;
        for (var i=0; i<this.length; i++) { 
            if (_pyfunc_op_equals(this[i], x)) {count+=1;}
        } return count;
    } else if (this.constructor == String) {
        var count = 0, i = start;
        while (i >= 0 && i < stop) {
            i = this.indexOf(x, i);
            if (i < 0) break; 
            count += 1;
            i += Math.max(1, x.length);
        } return count;
    } else return this.count.apply(this, arguments);
};
var _pymeth_endswith = function (x) { // nargs: 1
    if (this.constructor !== String) return this.endswith.apply(this, arguments);
    return this.lastIndexOf(x) == this.length - x.length;
};
var _pymeth_expandtabs = function (tabsize) { // nargs: 0 1
    if (this.constructor !== String) return this.expandtabs.apply(this, arguments);
    tabsize = (tabsize === undefined) ? 8 : tabsize;
    return this.replace(/\t/g, _pymeth_repeat.call(' ', tabsize));
};
var _pymeth_extend = function (x) { // nargs: 1
    if (!Array.isArray(this)) return this.extend.apply(this, arguments);
    this.push.apply(this, x);   
};
var _pymeth_find = function (x, start, stop) { // nargs: 1 2 3
    if (this.constructor !== String) return this.find.apply(this, arguments);
    start = (start === undefined) ? 0 : start;
    stop = (stop === undefined) ? this.length : stop;
    start = Math.max(0, ((start < 0) ? this.length + start : start));
    stop = Math.min(this.length, ((stop < 0) ? this.length + stop : stop));
    var i = this.slice(start, stop).indexOf(x);
    if (i >= 0) return i + start;
    return -1;
};
var _pymeth_get = function (key, d) { // nargs: 1 2
    if (this.constructor !== Object) return this.get.apply(this, arguments);
    if (this[key] !== undefined) {return this[key];}
    else if (d !== undefined) {return d;}
    else {return null;}
};
var _pymeth_index = function (x, start, stop) { // nargs: 1 2 3
    start = (start === undefined) ? 0 : start;
    stop = (stop === undefined) ? this.length : stop;
    start = Math.max(0, ((start < 0) ? this.length + start : start));
    stop = Math.min(this.length, ((stop < 0) ? this.length + stop : stop));
    if (Array.isArray(this)) {
        for (var i=start; i<stop; i++) {
            if (_pyfunc_op_equals(this[i], x)) {return i;} // indexOf cant
        }
    } else if (this.constructor === String) {
        var i = this.slice(start, stop).indexOf(x);
        if (i >= 0) return i + start;
    } else return this.index.apply(this, arguments);
    var e = Error(x); e.name='ValueError'; throw e;
};
var _pymeth_insert = function (i, x) { // nargs: 2
    if (!Array.isArray(this)) return this.insert.apply(this, arguments);
    i = (i < 0) ? this.length + i : i;
    this.splice(i, 0, x);
};
var _pymeth_isalnum = function () { // nargs: 0
    if (this.constructor !== String) return this.isalnum.apply(this, arguments);
    return Boolean(/^[A-Za-z0-9]+$/.test(this));
};
var _pymeth_isalpha = function () { // nargs: 0
    if (this.constructor !== String) return this.isalpha.apply(this, arguments);
    return Boolean(/^[A-Za-z]+$/.test(this));
};
var _pymeth_isidentifier = function () { // nargs: 0
    if (this.constructor !== String) return this.isidentifier.apply(this, arguments);
    return Boolean(/^[A-Za-z_][A-Za-z0-9_]*$/.test(this));
};
var _pymeth_islower = function () { // nargs: 0
    if (this.constructor !== String) return this.islower.apply(this, arguments);
    var low = this.toLowerCase(), high = this.toUpperCase();
    return low != high && low == this;
};
var _pymeth_isnumeric = function () { // nargs: 0
    if (this.constructor !== String) return this.isnumeric.apply(this, arguments);
    return Boolean(/^[0-9]+$/.test(this));
};
var _pymeth_isspace = function () { // nargs: 0
    if (this.constructor !== String) return this.isspace.apply(this, arguments);
    return Boolean(/^\s+$/.test(this));
};
var _pymeth_istitle = function () { // nargs: 0
    if (this.constructor !== String) return this.istitle.apply(this, arguments);
    var low = this.toLowerCase(), title = _pymeth_title.call(this);
    return low != title && title == this;
};
var _pymeth_isupper = function () { // nargs: 0
    if (this.constructor !== String) return this.isupper.apply(this, arguments);
    var low = this.toLowerCase(), high = this.toUpperCase();
    return low != high && high == this;
};
var _pymeth_items = function () { // nargs: 0
    if (this.constructor !== Object) return this.items.apply(this, arguments);
    var key, keys = Object.keys(this), res = []
    for (var i=0; i<keys.length; i++) {key = keys[i]; res.push([key, this[key]]);}
    return res;
};
var _pymeth_join = function (x) { // nargs: 1
    if (this.constructor !== String) return this.join.apply(this, arguments);
    return x.join(this);  // call join on the list instead of the string.   
};
var _pymeth_keys = function () { // nargs: 0
    if (typeof this['keys'] === 'function') return this.keys.apply(this, arguments);
    return Object.keys(this);
};
var _pymeth_ljust = function (w, fill) { // nargs: 1 2
    if (this.constructor !== String) return this.ljust.apply(this, arguments);
    fill = (fill === undefined) ? ' ' : fill;
    var tofill = Math.max(0, w - this.length);
    return this + _pymeth_repeat.call(fill, tofill);
};
var _pymeth_lower = function () { // nargs: 0
    if (this.constructor !== String) return this.lower.apply(this, arguments);
    return this.toLowerCase();
};
var _pymeth_lstrip = function (chars) { // nargs: 0 1
    if (this.constructor !== String) return this.lstrip.apply(this, arguments);
    chars = (chars === undefined) ? ' \t\r\n' : chars;
    for (var i=0; i<this.length; i++) {
        if (chars.indexOf(this[i]) < 0) return this.slice(i);
    } return '';
};
var _pymeth_partition = function (sep) { // nargs: 1
    if (this.constructor !== String) return this.partition.apply(this, arguments);
    if (sep === '') {var e = Error('empty sep'); e.name='ValueError'; throw e;}
    var i1 = this.indexOf(sep);
    if (i1 < 0) return [this.slice(0), '', '']
    var i2 = i1 + sep.length;
    return [this.slice(0, i1), this.slice(i1, i2), this.slice(i2)]; 
};
var _pymeth_pop = function (i, d) { // nargs: 1 2
    if (Array.isArray(this)) {
        i = (i === undefined) ? -1 : i;
        i = (i < 0) ? (this.length + i) : i;
        var popped = this.splice(i, 1);
        if (popped.length)  return popped[0];
        var e = Error(i); e.name='IndexError'; throw e;
    } else if (this.constructor === Object) {
        var res = this[i]
        if (res !== undefined) {delete this[i]; return res;}
        else if (d !== undefined) return d;
        var e = Error(i); e.name='KeyError'; throw e;
    } else return this.pop.apply(this, arguments);
};
var _pymeth_popitem = function () { // nargs: 0
    if (this.constructor !== Object) return this.popitem.apply(this, arguments);
    var keys, key, val;
    keys = Object.keys(this);
    if (keys.length == 0) {var e = Error(); e.name='KeyError'; throw e;}
    key = keys[0]; val = this[key]; delete this[key];
    return [key, val];
};
var _pymeth_remove = function (x) { // nargs: 1
    if (!Array.isArray(this)) return this.remove.apply(this, arguments);
    for (var i=0; i<this.length; i++) {
        if (_pyfunc_op_equals(this[i], x)) {this.splice(i, 1); return;}
    }
    var e = Error(x); e.name='ValueError'; throw e;
};
var _pymeth_repeat = function(count) { // nargs: 0
    if (this.repeat) return this.repeat(count);
    if (count < 1) return '';
    var result = '', pattern = this.valueOf();
    while (count > 1) {
        if (count & 1) result += pattern;
        count >>= 1, pattern += pattern;
    }
    return result + pattern;
};
var _pymeth_replace = function (s1, s2, count) {  // nargs: 2 3
    if (this.constructor !== String) return this.replace.apply(this, arguments);
    var i = 0, i2, parts = [];
    count = (count === undefined) ? 1e20 : count;
    while (count > 0) {
        i2 = this.indexOf(s1, i);
        if (i2 >= 0) {
            parts.push(this.slice(i, i2));
            parts.push(s2);
            i = i2 + s1.length;
            count -= 1;
        } else break;
    }
    parts.push(this.slice(i));
    return parts.join('');
};
var _pymeth_reverse = function () { // nargs: 0
    this.reverse();
};
var _pymeth_rfind = function (x, start, stop) { // nargs: 1 2 3
    if (this.constructor !== String) return this.rfind.apply(this, arguments);
    start = (start === undefined) ? 0 : start;
    stop = (stop === undefined) ? this.length : stop;
    start = Math.max(0, ((start < 0) ? this.length + start : start));
    stop = Math.min(this.length, ((stop < 0) ? this.length + stop : stop));
    var i = this.slice(start, stop).lastIndexOf(x);
    if (i >= 0) return i + start;
    return -1;
};
var _pymeth_rindex = function (x, start, stop) {  // nargs: 1 2 3
    if (this.constructor !== String) return this.rindex.apply(this, arguments);
    var i = _pymeth_rfind.call(this, x, start, stop);
    if (i >= 0) return i;
    var e = Error(x); e.name='ValueError'; throw e;
};
var _pymeth_rjust = function (w, fill) { // nargs: 1 2
    if (this.constructor !== String) return this.rjust.apply(this, arguments);
    fill = (fill === undefined) ? ' ' : fill;
    var tofill = Math.max(0, w - this.length);
    return _pymeth_repeat.call(fill, tofill) + this;
};
var _pymeth_rpartition = function (sep) { // nargs: 1
    if (this.constructor !== String) return this.rpartition.apply(this, arguments);
    if (sep === '') {var e = Error('empty sep'); e.name='ValueError'; throw e;}
    var i1 = this.lastIndexOf(sep);
    if (i1 < 0) return ['', '', this.slice(0)]
    var i2 = i1 + sep.length;
    return [this.slice(0, i1), this.slice(i1, i2), this.slice(i2)]; 
};
var _pymeth_rsplit = function (sep, count) { // nargs: 1 2
    if (this.constructor !== String) return this.rsplit.apply(this, arguments);
    sep = (sep === undefined) ? /\s/ : sep;
    count = Math.max(0, (count === undefined) ? 1e20 : count);
    var parts = this.split(sep);
    var limit = Math.max(0, parts.length-count);
    var res = parts.slice(limit);
    if (count < parts.length) res.splice(0, 0, parts.slice(0, limit).join(sep));
    return res;
};
var _pymeth_rstrip = function (chars) { // nargs: 0 1
    if (this.constructor !== String) return this.rstrip.apply(this, arguments);
    chars = (chars === undefined) ? ' \t\r\n' : chars;
    for (var i=this.length-1; i>=0; i--) {
        if (chars.indexOf(this[i]) < 0) return this.slice(0, i+1);
    } return '';
};
var _pymeth_setdefault = function (key, d) { // nargs: 1 2
    if (this.constructor !== Object) return this.setdefault.apply(this, arguments);
    if (this[key] !== undefined) {return this[key];}
    else if (d !== undefined) { this[key] = d; return d;}
    else {return null;}
};
var _pymeth_sort = function (key, reverse) { // nargs: 0 1 2
    if (!Array.isArray(this)) return this.sort.apply(this, arguments);
    var comp = function (a, b) {a = key(a); b = key(b);
        if (a<b) {return -1;} if (a>b) {return 1;} return 0;};
    comp = Boolean(key) ? comp : undefined; 
    this.sort(comp);
    if (reverse) this.reverse();
};
var _pymeth_split = function (sep, count) { // nargs: 0, 1 2
    if (this.constructor !== String) return this.split.apply(this, arguments);
    if (sep === '') {var e = Error('empty sep'); e.name='ValueError'; throw e;}
    sep = (sep === undefined) ? /\s/ : sep;
    if (count === undefined) { return this.split(sep); }
    var res = [], i = 0, index1 = 0, index2 = 0;
    while (i < count && index1 < this.length) {
        index2 = this.indexOf(sep, index1);
        if (index2 < 0) { break; }
        res.push(this.slice(index1, index2));
        index1 = index2 + sep.length || 1;
        i += 1;
    }
    res.push(this.slice(index1));
    return res;
};
var _pymeth_splitlines = function (keepends) { // nargs: 0 1
    if (this.constructor !== String) return this.splitlines.apply(this, arguments);
    keepends = keepends ? 1 : 0
    var finder = /\r\n|\r|\n/g;
    var i = 0, i2, isrn, parts = [];
    while (finder.exec(this) !== null) {
        i2 = finder.lastIndex -1;
        isrn = i2 > 0 && this[i2-1] == '\r' && this[i2] == '\n';
        if (keepends) parts.push(this.slice(i, finder.lastIndex));
        else parts.push(this.slice(i, i2 - isrn));
        i = finder.lastIndex;
    }
    if (i < this.length) parts.push(this.slice(i));
    else if (!parts.length) parts.push('');
    return parts;
};
var _pymeth_startswith = function (x) { // nargs: 1
    if (this.constructor !== String) return this.startswith.apply(this, arguments);
    return this.indexOf(x) == 0;
};
var _pymeth_strip = function (chars) { // nargs: 0 1
    if (this.constructor !== String) return this.strip.apply(this, arguments);
    chars = (chars === undefined) ? ' \t\r\n' : chars;
    var i, s1 = this, s2 = '', s3 = '';
    for (i=0; i<s1.length; i++) {
        if (chars.indexOf(s1[i]) < 0) {s2 = s1.slice(i); break;}
    } for (i=s2.length-1; i>=0; i--) {
        if (chars.indexOf(s2[i]) < 0) {s3 = s2.slice(0, i+1); break;}
    } return s3;
};
var _pymeth_swapcase = function () { // nargs: 0
    if (this.constructor !== String) return this.swapcase.apply(this, arguments);
    var c, res = [];
    for (var i=0; i<this.length; i++) {
        c = this[i];
        if (c.toUpperCase() == c) res.push(c.toLowerCase());
        else res.push(c.toUpperCase());
    } return res.join('');
};
var _pymeth_title = function () { // nargs: 0
    if (this.constructor !== String) return this.title.apply(this, arguments);
    var i0, res = [], tester = /^[^A-Za-z]?[A-Za-z]$/;
    for (var i=0; i<this.length; i++) {
        i0 = Math.max(0, i-1);
        if (tester.test(this.slice(i0, i+1))) res.push(this[i].toUpperCase());
        else res.push(this[i].toLowerCase());
    } return res.join('');
};
var _pymeth_translate = function (table) { // nargs: 1
    if (this.constructor !== String) return this.translate.apply(this, arguments);
    var c, res = [];
    for (var i=0; i<this.length; i++) {
        c = table[this[i]];
        if (c === undefined) res.push(this[i]);
        else if (c !== null) res.push(c);
    } return res.join('');
};
var _pymeth_update = function (other) { // nargs: 1
    if (this.constructor !== Object) return this.update.apply(this, arguments);
    var key, keys = Object.keys(other);
    for (var i=0; i<keys.length; i++) {key = keys[i]; this[key] = other[key];}
};
var _pymeth_upper = function () { // nargs: 0
    if (this.constructor !== String) return this.upper.apply(this, arguments);
    return this.toUpperCase();
};
var _pymeth_values = function () { // nargs: 0
    if (this.constructor !== Object) return this.values.apply(this, arguments);
    var key, keys = Object.keys(this), res = [];
    for (var i=0; i<keys.length; i++) {key = keys[i]; res.push(this[key]);}
    return res;
};
var _pymeth_zfill = function (width) { // nargs: 1
    if (this.constructor !== String) return this.zfill.apply(this, arguments);
    return _pymeth_rjust.call(this, width, '0');
};

return {_pyfunc_zip: _pyfunc_zip, _pyfunc_pow: _pyfunc_pow, _pyfunc_reversed: _pyfunc_reversed, _pyfunc_dict: _pyfunc_dict, _pyfunc_any: _pyfunc_any, _pyfunc_op_equals: _pyfunc_op_equals, _pyfunc_list: _pyfunc_list, _pyfunc_enumerate: _pyfunc_enumerate, _pyfunc_setattr: _pyfunc_setattr, _pyfunc_time: _pyfunc_time, _pyfunc_truthy: _pyfunc_truthy, _pyfunc_op_instantiate: _pyfunc_op_instantiate, _pyfunc_perf_counter: _pyfunc_perf_counter, _pyfunc_int: _pyfunc_int, _pyfunc_float: _pyfunc_float, _pyfunc_sum: _pyfunc_sum, _pyfunc_op_mult: _pyfunc_op_mult, _pyfunc_sorted: _pyfunc_sorted, _pyfunc_filter: _pyfunc_filter, _pyfunc_hasattr: _pyfunc_hasattr, _pyfunc_op_add: _pyfunc_op_add, _pyfunc_bool: _pyfunc_bool, _pyfunc_abs: _pyfunc_abs, _pyfunc_op_contains: _pyfunc_op_contains, _pyfunc_all: _pyfunc_all, _pyfunc_getattr: _pyfunc_getattr, _pyfunc_range: _pyfunc_range, _pyfunc_divmod: _pyfunc_divmod, _pyfunc_round: _pyfunc_round, _pyfunc_delattr: _pyfunc_delattr, _pyfunc_map: _pyfunc_map, _pyfunc_str: _pyfunc_str, _pyfunc_repr: _pyfunc_repr, _pymeth_remove: _pymeth_remove, _pymeth_index: _pymeth_index, _pymeth_capitalize: _pymeth_capitalize, _pymeth_isnumeric: _pymeth_isnumeric, _pymeth_isalpha: _pymeth_isalpha, _pymeth_partition: _pymeth_partition, _pymeth_rstrip: _pymeth_rstrip, _pymeth_repeat: _pymeth_repeat, _pymeth_setdefault: _pymeth_setdefault, _pymeth_islower: _pymeth_islower, _pymeth_casefold: _pymeth_casefold, _pymeth_isupper: _pymeth_isupper, _pymeth_swapcase: _pymeth_swapcase, _pymeth_extend: _pymeth_extend, _pymeth_lstrip: _pymeth_lstrip, _pymeth_clear: _pymeth_clear, _pymeth_isidentifier: _pymeth_isidentifier, _pymeth_zfill: _pymeth_zfill, _pymeth_popitem: _pymeth_popitem, _pymeth_split: _pymeth_split, _pymeth_reverse: _pymeth_reverse, _pymeth_isspace: _pymeth_isspace, _pymeth_rjust: _pymeth_rjust, _pymeth_values: _pymeth_values, _pymeth_sort: _pymeth_sort, _pymeth_copy: _pymeth_copy, _pymeth_endswith: _pymeth_endswith, _pymeth_replace: _pymeth_replace, _pymeth_rindex: _pymeth_rindex, _pymeth_rpartition: _pymeth_rpartition, _pymeth_title: _pymeth_title, _pymeth_join: _pymeth_join, _pymeth_splitlines: _pymeth_splitlines, _pymeth_rsplit: _pymeth_rsplit, _pymeth_startswith: _pymeth_startswith, _pymeth_expandtabs: _pymeth_expandtabs, _pymeth_keys: _pymeth_keys, _pymeth_append: _pymeth_append, _pymeth_lower: _pymeth_lower, _pymeth_isalnum: _pymeth_isalnum, _pymeth_items: _pymeth_items, _pymeth_count: _pymeth_count, _pymeth_get: _pymeth_get, _pymeth_translate: _pymeth_translate, _pymeth_center: _pymeth_center, _pymeth_find: _pymeth_find, _pymeth_update: _pymeth_update, _pymeth_ljust: _pymeth_ljust, _pymeth_istitle: _pymeth_istitle, _pymeth_upper: _pymeth_upper, _pymeth_insert: _pymeth_insert, _pymeth_pop: _pymeth_pop, _pymeth_strip: _pymeth_strip, _pymeth_rfind: _pymeth_rfind};
});


/* ======================= flexx.app._clientcore ========================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.app._clientcore", ["pyscript-std.js"], function (_py) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;





var Flexx, Serializer, __pyscript__, decodeUtf8, serializer;
"\nThe client's core Flexx engine, implemented in PyScript.\n";
__pyscript__ = true;
Flexx = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Flexx.prototype._base_class = Object;
Flexx.prototype._class_name = "Flexx";

Flexx.prototype.__init__ = function () {
    var config, err, err_2, jconfig, key, stub1_seq;
    this.is_notebook = false;
    this.is_exported = false;
    this.app_name = "";
    this.session_id = "";
    this.ws_url = "";
    if (_pyfunc_truthy(window.flexx.init)) {
        err_2 = new Error('RuntimeError:' + "Should not create Flexx object more than once."); err_2.name = "RuntimeError"; throw err_2;
    }
    stub1_seq = window.flexx;
    for (key in stub1_seq) {
        if (!stub1_seq.hasOwnProperty(key)){ continue; }
        this[key] = window.flexx[key];
    }
    if ((!_pyfunc_truthy(this.session_id))) {
        jconfig = window.document.getElementById("jupyter-config-data");
        if (_pyfunc_truthy(jconfig)) {
            try {
                config = JSON.parse(jconfig.innerText);
                this.session_id = config.flexx_session_id;
                this.app_name = config.flexx_app_name;
            } catch(err_4) {
                {
                    err = err_4;
                    console.log(err);
                }
            }
        }
    }
    this._init_time = _pyfunc_time();
    this._pending_commands = [];
    this._asset_count = 0;
    this.ws = null;
    this.last_msg = null;
    this.classes = {};
    this.instances = {};
    window.addEventListener("load", this.init, false);
    window.addEventListener("beforeunload", this.exit, false);
    return null;
};

Flexx.prototype.init = function () {
    this._asset_node = window.document.createElement("div");
    this._asset_node.id = "Flexx asset container";
    window.document.body.appendChild(this._asset_node);
    if (_pyfunc_truthy(this.is_exported)) {
        if (_pyfunc_truthy(this.is_notebook)) {
            console.log("Flexx: I am in an exported notebook!");
        } else {
            console.log("Flexx: I am in an exported app!");
            this.runExportedApp();
        }
    } else {
        console.log("Flexx: Initializing");
        if ((!_pyfunc_truthy(this.is_notebook))) {
            this._remove_querystring();
        }
        this.initSocket();
        this.initLogging();
    }
    return null;
};

Flexx.prototype._remove_querystring = function () {
    try {
        window.history.replaceState(window.history.state, "", window.location.pathname);
    } catch(err_2) {
        {
        }
    }
    return null;
};

Flexx.prototype.exit = function () {
    if (_pyfunc_truthy(this.ws)) {
        this.ws.close();
        this.ws = null;
    }
    return null;
};

Flexx.prototype.get = function (id) {
    if (_pyfunc_op_equals(id, "body")) {
        return window.document.body;
    } else {
        return this.instances[id];
    }
    return null;
};

Flexx.prototype.spin = function (text) {
    text = (text === undefined) ? "*": text;
        if (!window.document.body) {return;}
    var el = window.document.body.children[0];
    if (el && el.classList.contains("flx-spinner")) {
        if (text === null) {
            el.style.display = 'none';  // Stop the spinner
        } else {
            el.children[0].innerHTML += text.replace(/\*/g, '&#9632');
        }
    }
    ;
    return null;
};

Flexx.prototype.initSocket = function () {
    var WebSocket, address, err_2, on_ws_close, on_ws_error, on_ws_message, on_ws_open, proto, ws;
    WebSocket = window.WebSocket;
    if ((WebSocket === undefined)) {
        window.document.body.innerHTML = "Browser does not support WebSockets";
        throw "FAIL: need websocket";
    }
    if ((!_pyfunc_truthy(this.ws_url))) {
        proto = "ws";
        if (_pyfunc_op_equals(window.location.protocol, "https:")) {
            proto = "wss";
        }
        address = window.location.hostname;
        if (_pyfunc_truthy(window.location.port)) {
            address=_pyfunc_op_add(address, ":" + window.location.port)
        }
        this.ws_url = "" + proto + "://" + address + "/flexx/ws/" + this.app_name + "";
    }
    this.ws_url = _pymeth_replace.call(this.ws_url, "0.0.0.0", window.location.hostname);
    this.ws = ws = new WebSocket(this.ws_url);
    on_ws_open = (function flx_on_ws_open (evt) {
        window.console.info("Socket opened with session id " + this.session_id);
        ws.send("hiflexx " + this.session_id);
        return null;
    }).bind(this);

    on_ws_message = (function flx_on_ws_message (evt) {
        var msg;
        this.last_msg = msg = _pyfunc_truthy(evt.data) || evt;
        if ((this._pending_commands === null)) {
            this.command(msg);
        } else {
            if (_pyfunc_op_equals(this._pending_commands.length, 0)) {
                window.setTimeout(this._process_commands, 0);
            }
            this._pending_commands.push(msg);
        }
        return null;
    }).bind(this);

    on_ws_close = (function flx_on_ws_close (evt) {
        var msg;
        this.ws = null;
        msg = "Lost connection with server";
        if ((_pyfunc_truthy(evt) && _pyfunc_truthy(evt.reason))) {
            msg=_pyfunc_op_add(msg, ": " + evt.reason + " (" + evt.code + ")")
        }
        if ((!_pyfunc_truthy(this.is_notebook))) {
            window.document.body.innerHTML = msg;
        } else {
            window.console.info(msg);
        }
        return null;
    }).bind(this);

    on_ws_error = function (evt) {
        this.ws = null;
        window.console.error("Socket error");
        return null;
    };

    ws.onopen = on_ws_open;
    ws.onmessage = on_ws_message;
    ws.onclose = on_ws_close;
    ws.onerror = on_ws_error;
    return null;
};

Flexx.prototype.initLogging = function () {
    var error, info, log, on_error, warn;
    if (_pyfunc_truthy(window.console.ori_log)) {
        return null;
    }
    window.console.ori_log = window.console.log;
    window.console.ori_info = _pyfunc_truthy(window.console.info) || window.console.log;
    window.console.ori_warn = _pyfunc_truthy(window.console.warn) || window.console.log;
    window.console.ori_error = _pyfunc_truthy(window.console.error) || window.console.log;
    log = (function flx_log (msg) {
        window.console.ori_log(msg);
        if ((this.ws !== null)) {
            this.ws.send("PRINT " + msg);
        }
        return null;
    }).bind(this);

    info = (function flx_info (msg) {
        window.console.ori_info(msg);
        if ((this.ws !== null)) {
            this.ws.send("INFO " + msg);
        }
        return null;
    }).bind(this);

    warn = (function flx_warn (msg) {
        window.console.ori_warn(msg);
        if ((this.ws !== null)) {
            this.ws.send("WARN " + msg);
        }
        return null;
    }).bind(this);

    error = (function flx_error (msg) {
        var evt;
        evt = {message:_pyfunc_str(msg), error:msg, preventDefault:((function () {return null;}).bind(this))};
        on_error(evt);
        return null;
    }).bind(this);

    on_error = (function flx_on_error (evt) {
        var msg, session_needle, stack;
        msg = evt.message;
        if ((_pyfunc_truthy(evt.error) && _pyfunc_truthy(evt.error.stack))) {
            stack = _pymeth_splitlines.call(evt.error.stack);
            if (_pyfunc_op_contains(evt.message, stack[0])) {
                _pymeth_pop.call(stack, 0);
            }
            msg=_pyfunc_op_add(msg, "\n" + _pymeth_join.call("\n", stack))
            session_needle = "?session_id=" + this.session_id;
            msg = _pymeth_replace.call(_pymeth_replace.call(msg, "@", " @ "), session_needle, "");
        } else if ((_pyfunc_truthy(evt.message) && _pyfunc_truthy(evt.lineno))) {
            msg=_pyfunc_op_add(msg, "\nIn " + evt.filename + ":" + evt.lineno + "")
        }
        evt.preventDefault();
        window.console.ori_error(msg);
        if ((this.ws !== null)) {
            this.ws.send("ERROR " + evt.message);
        }
        return null;
    }).bind(this);

    on_error = on_error.bind(this);
    window.console.log = log;
    window.console.info = info;
    window.console.warn = warn;
    window.console.error = error;
    window.addEventListener("error", on_error, false);
    return null;
};

Flexx.prototype._process_commands = function () {
    var err, msg;
    while ((this._pending_commands !== null) && _pyfunc_truthy(this._pending_commands.length > 0)) {
        msg = _pymeth_pop.call(this._pending_commands, 0);
        try {
            this.command(msg);
        } catch(err_3) {
            {
                err = err_3;
                window.setTimeout(this._process_commands, 0);
                throw err;
            }
        }
        if (_pymeth_startswith.call(msg, "DEFINE-")) {
            this._asset_count=_pyfunc_op_add(this._asset_count, 1)
            if ((_pyfunc_op_equals((this._asset_count % 3), 0))) {
                if (this._pending_commands.length) {
                    window.setTimeout(this._process_commands, 0);
                }
                break;
            }
        }
    }
    return null;
};

Flexx.prototype.command = function (msg) {
    var address, cmd, code, el, link, name, stub2_, stub3_;
    if (_pymeth_startswith.call(msg, "PING ")) {
        this.ws.send("PONG " + msg.slice(5));
    } else if (_pyfunc_op_equals(msg, "INIT-DONE")) {
        this.spin(null);
        while (this._pending_commands.length) {
            this.command(_pymeth_pop.call(this._pending_commands, 0));
        }
        this._pending_commands = null;
    } else if (_pymeth_startswith.call(msg, "PRINT ")) {
        window.console.ori_log(msg.slice(6));
    } else if (_pymeth_startswith.call(msg, "EVAL ")) {
        window._ = eval(msg.slice(5));
        this.ws.send("RET " + window._);
    } else if (_pymeth_startswith.call(msg, "EXEC ")) {
        eval(msg.slice(5));
    } else if (_pyfunc_truthy(_pymeth_startswith.call(msg, "DEFINE-JS ") || _pymeth_startswith.call(msg, "DEFINE-JS-EVAL "))) {
        this.spin();
        stub2_ = _pymeth_split.call(msg, " ", 2);
        cmd = stub2_[0];name = stub2_[1];code = stub2_[2];
        address = _pyfunc_op_add((window.location.protocol + "//"), (_pymeth_split.call(this.ws_url, "/")[2]));
        code=_pyfunc_op_add(code, "\n//# sourceURL=" + address + "/flexx/assets/shared/" + name + "\n")
        if (_pymeth_startswith.call(msg, "DEFINE-JS-EVAL ")) {
            eval(code);
        } else {
            el = window.document.createElement("script");
            el.id = name;
            el.innerHTML = code;
            this._asset_node.appendChild(el);
        }
    } else if (_pymeth_startswith.call(msg, "DEFINE-CSS ")) {
        this.spin();
        stub3_ = _pymeth_split.call(msg, " ", 2);
        cmd = stub3_[0];name = stub3_[1];code = stub3_[2];
        address = _pyfunc_op_add((window.location.protocol + "//"), (_pymeth_split.call(this.ws_url, "/")[2]));
        code=_pyfunc_op_add(code, "\n/*# sourceURL=" + address + "/flexx/assets/shared/" + name + "*/\n")
        el = window.document.createElement("style");
        el.type = "text/css";
        el.id = name;
        el.innerHTML = code;
        this._asset_node.appendChild(el);
    } else if (_pymeth_startswith.call(msg, "TITLE ")) {
        window.document.title = msg.slice(6);
    } else if (_pymeth_startswith.call(msg, "ICON ")) {
        link = window.document.createElement("link");
        link.rel = "icon";
        link.href = msg.slice(5);
        window.document.head.appendChild(link);
    } else if (_pymeth_startswith.call(msg, "OPEN ")) {
        window.win1 = window.open(msg.slice(5), "new", "chrome");
    } else {
        window.console.warn((("Invalid command: \"") + msg) + ("\""));
    }
    return null;
};


decodeUtf8 = function flx_decodeUtf8 (arrayBuffer) {
        var result = "",
        i = 0,
        c = 0,
        c1 = 0,
        c2 = 0,
        c3 = 0,
        data = new Uint8Array(arrayBuffer);
    
    // If we have a BOM skip it
    if (data.length >= 3 &&
        data[0] === 0xef && data[1] === 0xbb && data[2] === 0xbf) {
        i = 3;
    }
    
    while (i < data.length) {
        c = data[i];
    
        if (c < 128) {
            result += String.fromCharCode(c);
            i += 1;
        } else if (c > 191 && c < 224) {
            if (i + 1 >= data.length) {
                throw "UTF-8 Decode failed. Two byte character was truncated.";
            }
            c2 = data[i + 1];
            result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        } else {
            if (i + 2 >= data.length) {
                throw "UTF-8 Decode failed. Multi byte character was truncated.";
            }
            c2 = data[i + 1];
            c3 = data[i + 2];
            result += String.fromCharCode(((c & 15) << 12) |
                                            ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return result;
    ;
    return null;
};

if ((!"this_is_js()")) {
}
Serializer = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Serializer.prototype._base_class = Object;
Serializer.prototype._class_name = "Serializer";

Serializer.prototype.__init__ = function () {
    var _replacer, _reviver, _revivers, add_reviver, loads, saves;
    this._revivers = _revivers = {};
    loads = (function flx_loads (text) {
        return JSON.parse(text, _reviver);
    }).bind(this);

    saves = (function flx_saves (obj) {
        var err_4, res;
        try {
            res = JSON.stringify(obj, _replacer);
            if ((res === undefined)) {
                err_4 = new Error('TypeError:' + ""); err_4.name = "TypeError"; throw err_4;
            }
            return res;
        } catch(err_3) {
            if (err_3 instanceof Error && err_3.name === "TypeError") {
                err_4 = new Error('TypeError:' + ("Cannot serialize object to JSON: " + _pyfunc_repr(obj) + "")); err_4.name = "TypeError"; throw err_4;
            }
        }
        return null;
    }).bind(this);

    add_reviver = (function flx_add_reviver (type_name, func) {
        if (!(({}).toString.call(type_name).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'string')) {throw "AssertionError: " + "({}).toString.call(type_name).match(/\\s([a-zA-Z]+)/)[1].toLowerCase() === 'string'";}
        _revivers[type_name] = func;
        return null;
    }).bind(this);

    _reviver = (function flx__reviver (dct, val) {
        var func, type;
        val = (val === undefined) ? undefined: val;
        if ((val !== undefined)) {
            dct = val;
        }
        if ((({}).toString.call(dct).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'object')) {
            type = _pymeth_get.call(dct, "__type__", null);
            if ((type !== null)) {
                func = _pymeth_get.call(_revivers, type, null);
                if ((func !== null)) {
                    return func(dct);
                }
            }
        }
        return dct;
    }).bind(this);

    _replacer = (function flx__replacer (obj, val) {
        var err_5;
        val = (val === undefined) ? undefined: val;
        if ((val === undefined)) {
            try {
                return obj.__json__();
            } catch(err_4) {
                if (err_4 instanceof Error && err_4.name === "AttributeError") {
                    err_5 = new Error('TypeError:' + ("Cannot serialize object to JSON: " + _pyfunc_repr(obj) + "")); err_5.name = "TypeError"; throw err_5;
                }
            }
        } else {
            if (((val !== null) && (val.__json__ !== undefined))) {
                return val.__json__();
            }
            return val;
        }
        return null;
    }).bind(this);

    this.loads = loads;
    this.saves = saves;
    this.add_reviver = add_reviver;
    return null;
};


serializer = new Serializer();
{ /* if this_is_js() */
window.flexx = new Flexx();
window.flexx.serializer = serializer;
}

return {Flexx: Flexx, Serializer: Serializer, decodeUtf8: decodeUtf8, serializer: serializer};
});


/* ========================== flexx.app._model ==========================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.app._model", ["pyscript-std.js", "flexx.app._clientcore"], function (_py, flexx_app__clientcore) {

"use strict";

var _pyfunc_zip = _py._pyfunc_zip, _pyfunc_pow = _py._pyfunc_pow, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_dict = _py._pyfunc_dict, _pyfunc_any = _py._pyfunc_any, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_list = _py._pyfunc_list, _pyfunc_enumerate = _py._pyfunc_enumerate, _pyfunc_setattr = _py._pyfunc_setattr, _pyfunc_time = _py._pyfunc_time, _pyfunc_truthy = _py._pyfunc_truthy, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_perf_counter = _py._pyfunc_perf_counter, _pyfunc_int = _py._pyfunc_int, _pyfunc_float = _py._pyfunc_float, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_sorted = _py._pyfunc_sorted, _pyfunc_filter = _py._pyfunc_filter, _pyfunc_hasattr = _py._pyfunc_hasattr, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_bool = _py._pyfunc_bool, _pyfunc_abs = _py._pyfunc_abs, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_all = _py._pyfunc_all, _pyfunc_getattr = _py._pyfunc_getattr, _pyfunc_range = _py._pyfunc_range, _pyfunc_divmod = _py._pyfunc_divmod, _pyfunc_round = _py._pyfunc_round, _pyfunc_delattr = _py._pyfunc_delattr, _pyfunc_map = _py._pyfunc_map, _pyfunc_str = _py._pyfunc_str, _pyfunc_repr = _py._pyfunc_repr;
var _pymeth_remove = _py._pymeth_remove, _pymeth_index = _py._pymeth_index, _pymeth_capitalize = _py._pymeth_capitalize, _pymeth_isnumeric = _py._pymeth_isnumeric, _pymeth_isalpha = _py._pymeth_isalpha, _pymeth_partition = _py._pymeth_partition, _pymeth_rstrip = _py._pymeth_rstrip, _pymeth_repeat = _py._pymeth_repeat, _pymeth_setdefault = _py._pymeth_setdefault, _pymeth_islower = _py._pymeth_islower, _pymeth_casefold = _py._pymeth_casefold, _pymeth_isupper = _py._pymeth_isupper, _pymeth_swapcase = _py._pymeth_swapcase, _pymeth_extend = _py._pymeth_extend, _pymeth_lstrip = _py._pymeth_lstrip, _pymeth_clear = _py._pymeth_clear, _pymeth_isidentifier = _py._pymeth_isidentifier, _pymeth_zfill = _py._pymeth_zfill, _pymeth_popitem = _py._pymeth_popitem, _pymeth_split = _py._pymeth_split, _pymeth_reverse = _py._pymeth_reverse, _pymeth_isspace = _py._pymeth_isspace, _pymeth_rjust = _py._pymeth_rjust, _pymeth_values = _py._pymeth_values, _pymeth_sort = _py._pymeth_sort, _pymeth_copy = _py._pymeth_copy, _pymeth_endswith = _py._pymeth_endswith, _pymeth_replace = _py._pymeth_replace, _pymeth_rindex = _py._pymeth_rindex, _pymeth_rpartition = _py._pymeth_rpartition, _pymeth_title = _py._pymeth_title, _pymeth_join = _py._pymeth_join, _pymeth_splitlines = _py._pymeth_splitlines, _pymeth_rsplit = _py._pymeth_rsplit, _pymeth_startswith = _py._pymeth_startswith, _pymeth_expandtabs = _py._pymeth_expandtabs, _pymeth_keys = _py._pymeth_keys, _pymeth_append = _py._pymeth_append, _pymeth_lower = _py._pymeth_lower, _pymeth_isalnum = _py._pymeth_isalnum, _pymeth_items = _py._pymeth_items, _pymeth_count = _py._pymeth_count, _pymeth_get = _py._pymeth_get, _pymeth_translate = _py._pymeth_translate, _pymeth_center = _py._pymeth_center, _pymeth_find = _py._pymeth_find, _pymeth_update = _py._pymeth_update, _pymeth_ljust = _py._pymeth_ljust, _pymeth_istitle = _py._pymeth_istitle, _pymeth_upper = _py._pymeth_upper, _pymeth_insert = _py._pymeth_insert, _pymeth_pop = _py._pymeth_pop, _pymeth_strip = _py._pymeth_strip, _pymeth_rfind = _py._pymeth_rfind;

var serializer = flexx_app__clientcore.serializer;





var Loop;
Loop = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Loop.prototype._base_class = Object;
Loop.prototype._class_name = "Loop";

Loop.prototype.__init__ = function () {
    this._pending_calls = [];
    this._scheduled = false;
    return null;
};

Loop.prototype.call_later = function (func) {
    _pymeth_append.call(this._pending_calls, func);
    if ((!_pyfunc_truthy(this._scheduled))) {
        this._scheduled = true;
        setTimeout(this.iter, 0);
    }
    return null;
};

Loop.prototype.iter = function () {
    var err, func;
    this._scheduled = false;
    while (this._pending_calls.length) {
        func = _pymeth_pop.call(this._pending_calls, 0);
        try {
            func();
        } catch(err_3) {
            {
                err = err_3;
                console.log(err);
            }
        }
    }
    return null;
};


var loop = new Loop();
flexx.classes.HasEvents = function () {
    _pyfunc_op_instantiate(this, arguments);
}
flexx.classes.HasEvents.prototype._base_class = Object;
flexx.classes.HasEvents.prototype._class_name = "flexx.classes.HasEvents";

flexx.classes.HasEvents.prototype._HANDLER_COUNT = 0;
flexx.classes.HasEvents.prototype._IS_HASEVENTS = true;
flexx.classes.HasEvents.prototype.__init__ = function (init_handlers) {
    var creator, func, name, stub1_seq, stub2_itr, stub3_seq, stub4_itr, stub5_seq, stub6_itr;
    init_handlers = (init_handlers === undefined) ? true: init_handlers;
    this.__handlers = {};
    this.__props_being_set = {};
    this.__props_ever_set = {};
    this.__pending_events = {};
    stub1_seq = this.__properties__;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        name = stub1_seq[stub2_itr];
        _pymeth_setdefault.call(this.__handlers, name, []);
        this[("_" + name) + "_value"] = null;
        this[("_" + name) + "_func"] = this[name];
    }
    stub3_seq = this.__properties__;
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) {
        stub3_seq = Object.keys(stub3_seq);
    }
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        name = stub3_seq[stub4_itr];
        func = this[("_" + name) + "_func"];
        creator = this["__create_" + func.emitter_type];
        creator(name);
        if ((func.default !== undefined)) {
            this._set_prop(name, func.default, true);
        }
    }
    stub5_seq = this.__emitters__;
    if ((typeof stub5_seq === "object") && (!Array.isArray(stub5_seq))) {
        stub5_seq = Object.keys(stub5_seq);
    }
    for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {
        name = stub5_seq[stub6_itr];
        _pymeth_setdefault.call(this.__handlers, name, []);
        func = this[name];
        this.__create_Emitter(func, name);
    }
    if (_pyfunc_truthy(init_handlers)) {
        this._init_handlers();
    }
    return null;
};

flexx.classes.HasEvents.prototype.__init_handlers = function () {
    var func, name, stub7_seq, stub8_itr;
    stub7_seq = this.__handlers__;
    if ((typeof stub7_seq === "object") && (!Array.isArray(stub7_seq))) {
        stub7_seq = Object.keys(stub7_seq);
    }
    for (stub8_itr = 0; stub8_itr < stub7_seq.length; stub8_itr += 1) {
        name = stub7_seq[stub8_itr];
        func = this[name];
        this[name] = this.__create_Handler(func, name, func._connection_strings);
    }
    return null;
};

flexx.classes.HasEvents.prototype.__connect = function () {
    var connection_strings, err_2, err_3, func, name, s, stub10_itr, stub9_seq;
    connection_strings = Array.prototype.slice.call(arguments);
    if (_pyfunc_truthy(connection_strings.length < 2)) {
        err_2 = new Error('RuntimeError:' + ("connect() (js) needs a function and one or " + "more connection strings.")); err_2.name = "RuntimeError"; throw err_2;
    }
    if ((typeof connection_strings[0] === "function")) {
        func = connection_strings[0];
        connection_strings = connection_strings.slice(1);
    } else if ((typeof connection_strings[connection_strings.length -1] === "function")) {
        func = connection_strings[connection_strings.length -1];
        connection_strings = connection_strings.slice(0,-1);
    } else {
        err_2 = new Error('TypeError:' + "connect() decorator requires a callable."); err_2.name = "TypeError"; throw err_2;
    }
    stub9_seq = connection_strings;
    if ((typeof stub9_seq === "object") && (!Array.isArray(stub9_seq))) {
        stub9_seq = Object.keys(stub9_seq);
    }
    for (stub10_itr = 0; stub10_itr < stub9_seq.length; stub10_itr += 1) {
        s = stub9_seq[stub10_itr];
        if ((!(((({}).toString.call(s).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'string')) && s.length))) {
            err_3 = new Error('ValueError:' + "Connection string must be nonempty strings."); err_3.name = "ValueError"; throw err_3;
        }
    }
    name = _pyfunc_truthy(func.__name__) || _pyfunc_truthy(func.name) || "anonymous";
    name = _pymeth_split.call((_pymeth_split.call(name, " ")[_pymeth_split.call(name, " ").length -1]), "flx_")[(_pymeth_split.call((_pymeth_split.call(name, " ")[_pymeth_split.call(name, " ").length -1]), "flx_")).length -1];
    return this.__create_Handler(func, name, connection_strings);
};

flexx.classes.HasEvents.prototype.__create_PyProperty = function (name) {
    this.__create_Property(name);
    return null;
};

flexx.classes.HasEvents.prototype.__create_Property = function (name) {
    var getter, opts, private_name, setter;
    private_name = ("_" + name) + "_value";
    getter = (function flx_getter () {
        return this[private_name];
    }).bind(this);

    setter = (function flx_setter (x) {
        this._set_prop(name, x);
        return null;
    }).bind(this);

    opts = {"enumerable": true, "configurable": true, "get": getter, "set": setter};
    Object.defineProperty(this, name, opts);
    return null;
};

flexx.classes.HasEvents.prototype.__create_Readonly = function (name) {
    var getter, opts, private_name, setter;
    private_name = ("_" + name) + "_value";
    getter = (function flx_getter () {
        return this[private_name];
    }).bind(this);

    setter = (function flx_setter (x) {
        var err_2;
        err_2 = new Error('AttributeError:' + ("Readonly " + name + " is not settable")); err_2.name = "AttributeError"; throw err_2;
        return null;
    }).bind(this);

    opts = {"enumerable": true, "configurable": true, "get": getter, "set": setter};
    Object.defineProperty(this, name, opts);
    return null;
};

flexx.classes.HasEvents.prototype.__create_Emitter = function (emitter_func, name) {
    var func, getter, opts, setter;
    func = (function flx_func () {
        var args, ev;
        args = Array.prototype.slice.call(arguments);
        ev = emitter_func.apply(this, args);
        if ((ev !== null)) {
            this.emit(name, ev);
        }
        return null;
    }).bind(this);

    getter = (function flx_getter () {
        return func;
    }).bind(this);

    setter = (function flx_setter (x) {
        var err_2;
        err_2 = new Error('AttributeError:' + ("Emitter " + name + " is not settable")); err_2.name = "AttributeError"; throw err_2;
        return null;
    }).bind(this);

    opts = {"enumerable": true, "configurable": true, "get": getter, "set": setter};
    Object.defineProperty(this, name, opts);
    return null;
};

flexx.classes.HasEvents.prototype.__create_Handler = function (handler_func, name, connection_strings) {
    var handler, that;
    handler = (function flx_handler () {
        var events;
        events = Array.prototype.slice.call(arguments);
        return handler_func.apply(this, events);
    }).bind(this);

    
    handler._add_pending_event = function (label, ev) {
        if ((!_pyfunc_truthy(this._scheduled_update))) {
            this._scheduled_update = true;
            { /* if this_is_js() */
            loop.call_later(this._handle_now_callback.bind(this));
            }
        }
        _pymeth_append.call(this._pending, [label, ev]);
        return null;
    };

    handler._clear_hasevents_refs = function (ob) {
        var connection, i, stub1_seq, stub2_itr;
        stub1_seq = this._connections;
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
            stub1_seq = Object.keys(stub1_seq);
        }
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            connection = stub1_seq[stub2_itr];
            for (i = connection.objects.length - 1; i > -1; i += -1) {
                if (((connection.objects[i][0]) === ob)) {
                    _pymeth_pop.call(connection.objects, i);
                }
            }
        }
        return null;
    };

    handler._collect = function () {
        var ev, events, index, label, reconnect, stub1_seq, stub2_itr, stub3_tgt;
        events = [];
        reconnect = [];
        stub1_seq = this._pending;
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
            stub1_seq = Object.keys(stub1_seq);
        }
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            stub3_tgt = stub1_seq[stub2_itr];
            label = stub3_tgt[0]; ev = stub3_tgt[1];
            if (_pymeth_startswith.call(label, "reconnect_")) {
                index = _pyfunc_int((_pymeth_split.call(label, "_")[_pymeth_split.call(label, "_").length -1]));
                _pymeth_append.call(reconnect, index);
            } else {
                _pymeth_append.call(events, ev);
            }
        }
        return [events, reconnect];
    };

    handler._connect_to_event = function (index) {
        var connection, err_3, ob, stub1_, stub2_seq, stub3_itr, stub4_tgt, type;
        connection = this._connections[index];
        while (connection.objects.length) {
            stub1_ = _pymeth_pop.call(connection.objects, 0);
            ob = stub1_[0];type = stub1_[1];
            ob.disconnect(type, this);
        }
        ob = this._ob1();
        if ((ob !== null)) {
            this._seek_event_object(index, connection.parts, ob);
        }
        if ((!_pyfunc_truthy(connection.objects))) {
            err_3 = new Error('RuntimeError:' + ("Could not connect to " + _pyfunc_repr(connection.fullname) + "")); err_3.name = "RuntimeError"; throw err_3;
        }
        stub2_seq = connection.objects;
        if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
            stub2_seq = Object.keys(stub2_seq);
        }
        for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
            stub4_tgt = stub2_seq[stub3_itr];
            ob = stub4_tgt[0]; type = stub4_tgt[1];
            ob._register_handler(type, this, connection.force);
        }
        return null;
    };

    handler._handle_now_callback = function () {
        this._scheduled_update = false;
        this.handle_now();
        return null;
    };

    handler._init = function (connection_strings) {
        var _, c, d, err_5, force, fullname, ichars, index, is_identifier, label, part, parts, s, s0, stub1_, stub2_seq, stub3_itr, stub4_seq, stub5_itr, stub6_seq, stub7_itr;
        ichars = "0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        this._connections = [];
        stub6_seq = connection_strings;
        if ((typeof stub6_seq === "object") && (!Array.isArray(stub6_seq))) {
            stub6_seq = Object.keys(stub6_seq);
        }
        for (stub7_itr = 0; stub7_itr < stub6_seq.length; stub7_itr += 1) {
            fullname = stub6_seq[stub7_itr];
            force = _pymeth_startswith.call(fullname, "!");
            stub1_ = _pymeth_partition.call(_pymeth_lstrip.call(fullname, "!"), ":");
            s = stub1_[0];_ = stub1_[1];label = stub1_[2];
            s0 = s;
            if ((_pyfunc_op_contains(".*.", (s + ".")))) {
                s = _pymeth_replace.call(s, ".*", "*");
                console.warn("Connection string syntax \"foo.*.bar\" is deprecated, use \"" + s + "\" instead of \"" + s0 + "\":.");
            }
            if (_pyfunc_op_contains("!", s)) {
                s = _pymeth_replace.call(s, "!", "");
                force = true;
                console.warn("Exclamation marks in connection strings must come at the very start, use \"!" + s + "\" instead of \"" + s0 + "\".");
            }
            parts = _pymeth_split.call(s, ".");
            stub4_seq = parts;
            if ((typeof stub4_seq === "object") && (!Array.isArray(stub4_seq))) {
                stub4_seq = Object.keys(stub4_seq);
            }
            for (stub5_itr = 0; stub5_itr < stub4_seq.length; stub5_itr += 1) {
                part = stub4_seq[stub5_itr];
                part = _pymeth_rstrip.call(part, "*");
                is_identifier = _pyfunc_bool(part);
                stub2_seq = part;
                if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
                    stub2_seq = Object.keys(stub2_seq);
                }
                for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
                    c = stub2_seq[stub3_itr];
                    is_identifier = _pyfunc_truthy(is_identifier) && _pyfunc_op_contains(c, ichars);
                }
                if ((!_pyfunc_truthy(is_identifier))) {
                    err_5 = new Error('ValueError:' + ("Connection string " + _pyfunc_repr(s) + " contains non-identifier part " + _pyfunc_repr(part) + "")); err_5.name = "ValueError"; throw err_5;
                }
            }
            d = {};
            _pymeth_append.call(this._connections, d);
            d.fullname = fullname;
            d.parts = parts;
            d.type = _pyfunc_op_add((_pymeth_rstrip.call(parts[parts.length -1], "*") + ":"), (_pyfunc_truthy(label) || this._name));
            d.force = force;
            d.objects = [];
        }
        this._scheduled_update = false;
        this._pending = [];
        for (index = 0; index < this._connections.length; index += 1) {
            this._connect_to_event(index);
        }
        return null;
    };

    handler._seek_event_object = function (index, path, ob) {
        var connection, err_3, name_label, new_ob, obname, obname_full, selector, stub1_, stub2_seq, stub3_itr, sub_ob, t;
        connection = this._connections[index];
        if (((ob === null) || _pyfunc_op_equals(path.length, 0))) {
            return null;
        }
        if (_pyfunc_op_equals(path.length, 1)) {
            if (_pyfunc_hasattr(ob, "_IS_HASEVENTS")) {
                _pymeth_append.call(connection.objects, [ob, connection.type]);
            }
            if ((!_pyfunc_truthy(_pymeth_endswith.call(path[0], "**")))) {
                return null;
            }
        }
        stub1_ = [path[0], path.slice(1)];
        obname_full = stub1_[0];path = stub1_[1];
        obname = _pymeth_rstrip.call(obname_full, "*");
        selector = obname_full.slice(obname.length);
        if (_pyfunc_op_equals(selector, "***")) {
            this._seek_event_object(index, path, ob);
        }
        if ((_pyfunc_hasattr(ob, "_IS_HASEVENTS") && _pyfunc_op_contains(obname, ob.__properties__))) {
            name_label = _pyfunc_op_add((obname + ":reconnect_"), _pyfunc_str(index));
            _pymeth_append.call(connection.objects, [ob, name_label]);
            new_ob = _pyfunc_getattr(ob, obname, null);
        } else {
            new_ob = _pyfunc_getattr(ob, obname, null);
        }
        if ((selector.length && _pyfunc_op_contains(selector, "***") && ((({}).toString.call(new_ob).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'array')))) {
            if (_pyfunc_truthy(selector.length > 1)) {
                path = _pyfunc_op_add([obname + "***"], path);
            }
            stub2_seq = new_ob;
            if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
                stub2_seq = Object.keys(stub2_seq);
            }
            for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
                sub_ob = stub2_seq[stub3_itr];
                this._seek_event_object(index, path, sub_ob);
            }
            return null;
        } else if (_pyfunc_op_equals(selector, "*")) {
            t = "Invalid connection {name_full} because {name} is not a tuple/list.";
            err_3 = new Error('RuntimeError:' + (_pymeth_replace.call(_pymeth_replace.call(t, "{name_full}", obname_full), "{name}", obname))); err_3.name = "RuntimeError"; throw err_3;
        } else {
            return this._seek_event_object(index, path, new_ob);
        }
        return null;
    };

    handler._use_once = function (func) {
        this._func_once = func;
        return null;
    };

    handler.dispose = function () {
        var connection, ob, stub1_, stub2_seq, stub3_itr, type;
        if ((!"this_is_js()")) {
        }
        stub2_seq = this._connections;
        if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
            stub2_seq = Object.keys(stub2_seq);
        }
        for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
            connection = stub2_seq[stub3_itr];
            while (connection.objects.length) {
                stub1_ = _pymeth_pop.call(connection.objects, 0);
                ob = stub1_[0];type = stub1_[1];
                ob.disconnect(type, this);
            }
        }
        while (this._pending.length) {
            this._pending.pop();
        }
        return null;
    };

    handler.get_connection_info = function () {
        return (function list_comprehension () {var res = [];var c, iter0, i0;iter0 = this._connections;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {c = iter0[i0];{res.push([c.fullname, (function list_comprehension () {var res = [];var u, iter0, i0;iter0 = c.objects;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {u = iter0[i0];{res.push(u[1]);}}return res;}).apply(this)]);}}return res;}).apply(this);
    };

    handler.get_name = function () {
        return this._name;
    };

    handler.handle_now = function () {
        var err, events, events2, index, reconnect, reconnect2, stub1_, stub2_seq, stub3_itr, stub4_;
        stub1_ = this._collect();
        events = stub1_[0];reconnect = stub1_[1];
        this._pending = [];
        stub2_seq = reconnect;
        if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
            stub2_seq = Object.keys(stub2_seq);
        }
        for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
            index = stub2_seq[stub3_itr];
            this._connect_to_event(index);
        }
        stub4_ = this._collect();
        events2 = stub4_[0];reconnect2 = stub4_[1];
        if ((!reconnect2.length)) {
            events = _pyfunc_op_add(events, events2);
            this._pending = [];
        }
        if (events.length) {
            if ((!"this_is_js()")) {
            }
            try {
                this.apply(null, events);
            } catch(err_4) {
                {
                    err = err_4;
                    { /* if this_is_js() */
                    console.error(err);
                    }
                }
            }
        }
        return null;
    };

;
    that = this;
    flexx.classes.HasEvents.prototype._HANDLER_COUNT=_pyfunc_op_add(flexx.classes.HasEvents.prototype._HANDLER_COUNT, 1)
    handler._name = name;
    handler._id = "h" + _pyfunc_str(flexx.classes.HasEvents.prototype._HANDLER_COUNT);
    handler._ob1 = (function () {return that;}).bind(this);
    handler._init(connection_strings, this);
    return handler;
};


flexx.classes.HasEvents.prototype._emit = function (ev) {
    var handler, label, stub1_seq, stub2_itr, stub3_tgt;
    stub1_seq = _pymeth_get.call(this.__handlers, ev.type, []);
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        stub3_tgt = stub1_seq[stub2_itr];
        label = stub3_tgt[0]; handler = stub3_tgt[1];
        handler._add_pending_event(label, ev);
    }
    return null;
};

flexx.classes.HasEvents.prototype._handlers_changed_hook = function () {
    return null;
};

flexx.classes.HasEvents.prototype._init_handlers = function () {
    var stop_capturing;
    if ((this.__pending_events === null)) {
        return null;
    }
    stop_capturing = (function flx_stop_capturing () {
        this.__pending_events = null;
        return null;
    }).bind(this);

    loop.call_later(stop_capturing);
    this.__init_handlers();
    return null;
};

flexx.classes.HasEvents.prototype._register_handler = function (event_type, handler, force) {
    var _, entry, ev, handlers, label, msg, stub1_, stub2_seq, stub3_itr, type;
    force = (force === undefined) ? false: force;
    stub1_ = _pymeth_partition.call(event_type, ":");
    type = stub1_[0];_ = stub1_[1];label = stub1_[2];
    label = _pyfunc_truthy(label) || handler._name;
    handlers = _pymeth_get.call(this.__handlers, type, null);
    if ((handlers === null)) {
        handlers = [];
        this.__handlers[type] = handlers;
        if ((!_pyfunc_truthy(force))) {
            msg = ("Event type \"{}\" does not exist. ") + ("Use \"!{}\" or \"!foo.bar.{}\" to suppress this warning.");
            msg = _pymeth_replace.call(msg, "{}", type);
            if (_pyfunc_hasattr(this, "id")) {
                msg = _pymeth_replace.call(msg, "exist.", ("exist on " + this.id + "."));
            }
            { /* if this_is_js() */
            console.warn(msg);
            }
        }
    }
    entry = [label, handler];
    if ((!_pyfunc_op_contains(entry, handlers))) {
        _pymeth_append.call(handlers, entry);
    }
    _pymeth_sort.call(handlers, ((function (x) {return _pyfunc_op_add((x[0] + "-"), (x[1]._id));}).bind(this)), false);
    this._handlers_changed_hook();
    if ((this.__pending_events !== null)) {
        if ((!_pymeth_startswith.call(label, "reconnect_"))) {
            stub2_seq = _pymeth_get.call(this.__pending_events, type, []);
            if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) {
                stub2_seq = Object.keys(stub2_seq);
            }
            for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
                ev = stub2_seq[stub3_itr];
                handler._add_pending_event(label, ev);
            }
        }
    }
    return null;
};

flexx.classes.HasEvents.prototype._set_prop = function (prop_name, value, _initial) {
    var cname, err_2, func, func_name, is_equal, old, private_name, prop_being_set, value2;
    _initial = (_initial === undefined) ? false: _initial;
    if ((!(({}).toString.call(prop_name).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'string'))) {
        err_2 = new Error('TypeError:' + ("_set_prop's first arg must be str, not " + prop_name.constructor.prototype + "")); err_2.name = "TypeError"; throw err_2;
    }
    if ((!_pyfunc_op_contains(prop_name, this.__properties__))) {
        cname = this.constructor.prototype.__name__;
        err_2 = new Error('AttributeError:' + ("" + cname + " object has no property " + _pyfunc_repr(prop_name) + "")); err_2.name = "AttributeError"; throw err_2;
    }
    prop_being_set = _pymeth_get.call(this.__props_being_set, prop_name, null);
    if (_pyfunc_truthy(prop_being_set)) {
        return null;
    }
    private_name = ("_" + prop_name) + "_value";
    func_name = ("_" + prop_name) + "_func";
    this.__props_being_set[prop_name] = true;
    this.__props_ever_set[prop_name] = true;
    func = _pyfunc_getattr(this, func_name);
    try {
        { /* if this_is_js() */
        value2 = func.apply(this, [value]);
        }
    } finally {
        this.__props_being_set[prop_name] = false;
    }
    if ((prop_being_set === null)) {
        _pyfunc_setattr(this, private_name, value2);
        this.emit(prop_name, {new_value:value2, old_value:value2});
        return true;
    }
    old = _pyfunc_getattr(this, private_name);
    { /* if this_is_js() */
    is_equal = _pyfunc_op_equals(old, value2);
    }
    if ((!_pyfunc_truthy(is_equal))) {
        _pyfunc_setattr(this, private_name, value2);
        this.emit(prop_name, {new_value:value2, old_value:old});
        return true;
    }
    return null;
};

flexx.classes.HasEvents.prototype.connect = function () {
    var connection_strings;
    connection_strings = Array.prototype.slice.call(arguments);
    return this.__connect.apply(this, connection_strings);
};

flexx.classes.HasEvents.prototype.disconnect = function (type, handler) {
    var _, entry, handlers, i, label, stub1_;
    handler = (handler === undefined) ? null: handler;
    stub1_ = _pymeth_partition.call(type, ":");
    type = stub1_[0];_ = stub1_[1];label = stub1_[2];
    handlers = _pymeth_get.call(this.__handlers, type, []);
    for (i = handlers.length - 1; i > -1; i += -1) {
        entry = handlers[i];
        if ((!(((_pyfunc_truthy(label) && ((!_pyfunc_op_equals(label, entry[0]))))) || (_pyfunc_truthy(handler) && (handler !== entry[1]))))) {
            _pymeth_pop.call(handlers, i);
        }
    }
    this._handlers_changed_hook();
    return null;
};

flexx.classes.HasEvents.prototype.dispose = function () {
    var handler, handlers, label, name, stub1_seq, stub2_itr, stub3_tgt, stub4_seq, stub5_seq, stub6_itr;
    if ((!"this_is_js()")) {
    }
    stub4_seq = this.__handlers;
    for (name in stub4_seq) {
        if (!stub4_seq.hasOwnProperty(name)){ continue; }
        handlers = stub4_seq[name];
        stub1_seq = handlers;
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
            stub1_seq = Object.keys(stub1_seq);
        }
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            stub3_tgt = stub1_seq[stub2_itr];
            label = stub3_tgt[0]; handler = stub3_tgt[1];
            handler._clear_hasevents_refs(this);
        }
        while (handlers.length) {
            handlers.pop();
        }
    }
    stub5_seq = this.__handlers__;
    if ((typeof stub5_seq === "object") && (!Array.isArray(stub5_seq))) {
        stub5_seq = Object.keys(stub5_seq);
    }
    for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {
        name = stub5_seq[stub6_itr];
        _pyfunc_getattr(this, name).dispose();
    }
    return null;
};

flexx.classes.HasEvents.prototype.emit = function (type, info) {
    var _, err_2, ev, label, stub1_;
    info = (info === undefined) ? null: info;
    info = ((info === null))? ({}) : (info);
    stub1_ = _pymeth_partition.call(type, ":");
    type = stub1_[0];_ = stub1_[1];label = stub1_[2];
    if (label.length) {
        err_2 = new Error('ValueError:' + "The type given to emit() should not include a label."); err_2.name = "ValueError"; throw err_2;
    }
    if ((!(({}).toString.call(info).match(/\s([a-zA-Z]+)/)[1].toLowerCase() === 'object'))) {
        err_2 = new Error('TypeError:' + ("Info object (for " + _pyfunc_repr(type) + ") must be a dict, not " + _pyfunc_repr(info) + "")); err_2.name = "TypeError"; throw err_2;
    }
    ev = _pyfunc_dict(info);
    ev.type = type;
    ev.source = this;
    if ((this.__pending_events !== null)) {
        _pymeth_append.call(_pymeth_setdefault.call(this.__pending_events, ev.type, []), ev);
    }
    this._emit(ev);
    return ev;
};

flexx.classes.HasEvents.prototype.get_event_handlers = function (type) {
    var _, err_2, handlers, label, stub1_;
    if ((!_pyfunc_truthy(type))) {
        err_2 = new Error('TypeError:' + ("get_event_handlers() missing \"type\" argument.")); err_2.name = "TypeError"; throw err_2;
    }
    stub1_ = _pymeth_partition.call(type, ":");
    type = stub1_[0];_ = stub1_[1];label = stub1_[2];
    if (label.length) {
        err_2 = new Error('ValueError:' + "The type given to get_event_handlers() should not include a label."); err_2.name = "ValueError"; throw err_2;
    }
    handlers = _pymeth_get.call(this.__handlers, type, []);
    return (function list_comprehension () {var res = [];var h, iter0, i0;iter0 = handlers;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {h = iter0[i0];{res.push(h[1]);}}return res;}).apply(this);
};

flexx.classes.HasEvents.prototype.get_event_types = function () {
    var types;
    types = _pyfunc_list(this.__handlers);
    _pymeth_sort.call(types, undefined, false);
    return types;
};


var Model = flexx.classes.Model = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Model.prototype = Object.create(flexx.classes.HasEvents.prototype);
Model.prototype._base_class = flexx.classes.HasEvents.prototype;
Model.prototype._class_name = "Model";

Model.prototype.__emitters__ = [];
Model.prototype.__handlers__ = [];
Model.prototype.__local_properties__ = [];
Model.prototype.__properties__ = [];

Model.prototype.__from_json__ = function flx___from_json__ (dct) {
    return window.flexx.instances[dct.id];
};

Model.prototype.__init__ = function (id, py_events, py_known_events) {
    var name, stub1_seq, stub2_itr;
    py_events = (py_events === undefined) ? null: py_events;
    py_known_events = (py_known_events === undefined) ? null: py_known_events;
    if (!(id)) {throw "AssertionError: " + "id";}
    this.__id = this._id = this.id = id;
    this.__event_types_py = (_pyfunc_truthy(py_events))? (py_events) : ([]);
    this._sync_props = true;
    flexx.classes.HasEvents.prototype.__init__.call(this, false);
    stub1_seq = py_known_events;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) {
        stub1_seq = Object.keys(stub1_seq);
    }
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        name = stub1_seq[stub2_itr];
        _pymeth_setdefault.call(this.__handlers, name, []);
    }
    return null;
};

Model.prototype.__json__ = function () {
    return {"__type__": "Flexx-Model", "id": this.id, "session_id": window.flexx.session_id};
};

Model.prototype._emit_from_py = function (type, text) {
    var ev;
    ev = serializer.loads(text);
    this.emit(type, ev, true);
    return null;
};

Model.prototype._handlers_changed_hook = function () {
    var handlers, text, types;
    handlers = this.__handlers;
    types = (function list_comprehension () {var res = [];var name, iter0, i0;iter0 = _pymeth_keys.call(handlers);if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {name = iter0[i0];if (!((handlers[name].length))) {continue;}{res.push(name);}}return res;}).apply(this);
    text = serializer.saves(types);
    if (_pyfunc_truthy(window.flexx.ws)) {
        window.flexx.ws.send("SET_EVENT_TYPES " + _pymeth_join.call([this.id, text], " "));
    }
    return null;
};

Model.prototype._new_event_type_hook = function (event_type) {
    return null;
};

Model.prototype._register_handler = function () {
    var args, event_type;
    args = Array.prototype.slice.call(arguments);
    event_type = _pymeth_split.call(args[0], ":")[0];
    if ((!_pyfunc_truthy(this.get_event_handlers(event_type)))) {
        this._new_event_type_hook(event_type);
    }
    return flexx.classes.HasEvents.prototype._register_handler.apply(this, args);
};

Model.prototype._set_event_types_py = function (event_types) {
    this.__event_types_py = event_types;
    return null;
};

Model.prototype._set_prop = function (name, value, _initial, frompy) {
    var ischanged, islocal, issyncable, txt;
    _initial = (_initial === undefined) ? false: _initial;
    frompy = (frompy === undefined) ? false: frompy;
    islocal = this.__local_properties__.indexOf(name) >= 0;
    issyncable = ((!_pyfunc_truthy(_initial))) && ((!_pyfunc_truthy(islocal))) && _pyfunc_truthy(this._sync_props);
    if ((window.flexx.ws === null)) {
        flexx.classes.HasEvents.prototype._set_prop.call(this, name, value, _initial);
        return null;
    }
    ischanged = flexx.classes.HasEvents.prototype._set_prop.call(this, name, value, _initial);
    if ((_pyfunc_truthy(ischanged) && _pyfunc_truthy(issyncable))) {
        value = this[name];
        txt = serializer.saves(value);
        window.flexx.ws.send("SET_PROP " + _pymeth_join.call([this.id, name, txt], " "));
    }
    return null;
};

Model.prototype._set_prop_from_py = function (name, text) {
    var value;
    value = serializer.loads(text);
    this._set_prop(name, value, false, true);
    return null;
};

Model.prototype.dispose = function () {
    window.flexx.instances[this._id] = "disposed";
    return null;
};

Model.prototype.emit = function (type, info, frompy) {
    var ev, isprop, txt;
    info = (info === undefined) ? null: info;
    frompy = (frompy === undefined) ? false: frompy;
    ev = flexx.classes.HasEvents.prototype.emit.call(this, type, info);
    isprop = (_pyfunc_truthy(this.__properties__.indexOf(type) >= 0)) && (_pyfunc_truthy(this.__local_properties__.indexOf(type) < 0)) && _pyfunc_truthy(this._sync_props);
    if (_pyfunc_truthy(((!_pyfunc_truthy(frompy))) && ((!_pyfunc_truthy(isprop))) && _pyfunc_op_contains(type, this.__event_types_py))) {
        txt = serializer.saves(ev);
        if (_pyfunc_truthy(window.flexx.ws)) {
            window.flexx.ws.send("EVENT " + _pymeth_join.call([this.id, type, txt], " "));
        }
    }
    return null;
};

Model.prototype.init = function () {
    return null;
};

Model.prototype.receive_data = function (data, meta) {
    console.log(this.id + " " + "received data but did not handle it");
    return null;
};

Model.prototype.retrieve_data = function (url, meta) {
    var process_response, xhr;
    process_response = (function flx_process_response () {
        var err_3;
        if (_pyfunc_op_equals(xhr.status, 200)) {
            this.receive_data(xhr.response, meta);
        } else {
            err_3 = new Error('RuntimeError:' + ("Retrieving data for " + this.id + " failed with HTTP status " + xhr.status + "")); err_3.name = "RuntimeError"; throw err_3;
        }
        return null;
    }).bind(this);

    xhr = new window.XMLHttpRequest();
    xhr.open("GET", url);
    xhr.responseType = "arraybuffer";
    xhr.onload = process_response;
    xhr.send();
    return null;
};


flexx.serializer.add_reviver("Flexx-Model", flexx.classes.Model.prototype.__from_json__);


return {Model: Model};
});
